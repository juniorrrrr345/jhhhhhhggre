require('dotenv').config();
const mongoose = require('mongoose');
const Config = require('../src/models/Config');

async function fixDatabase() {
  try {
    console.log('üîÑ Connexion √† MongoDB...');
    
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
      heartbeatFrequencyMS: 2000,
      maxPoolSize: 10,
      minPoolSize: 2,
      maxIdleTimeMS: 300000,
    });
    
    console.log('‚úÖ MongoDB connect√© avec succ√®s');
    
    // V√©rifier si la configuration existe
    const existingConfig = await Config.findById('main');
    
    if (!existingConfig) {
      console.log('üìù Cr√©ation de la configuration par d√©faut...');
      
      const defaultConfig = new Config({
        _id: 'main',
        welcome: {
          text: 'üåü Bienvenue sur notre bot !\n\nD√©couvrez nos meilleurs plugs s√©lectionn√©s avec soin pour vous offrir un service de qualit√© premium.\n\nüî• Section VIP mise √† jour quotidiennement\n‚úÖ Services v√©rifi√©s',
          image: '',
          socialMedia: []
        },
        buttons: {
          topPlugs: {
            text: 'üîå Top Des Plugs',
            enabled: true
          },
          contact: {
            text: 'üìû Contact',
            content: 'Besoin d\'aide ou d\'informations ?\n\nüìß Email: support@botplugs.com\nüì± Support disponible 24h/7j\n\nüîí Toutes vos communications sont crypt√©es et s√©curis√©es.',
            enabled: true
          },
          info: {
            text: '‚ÑπÔ∏è Info',
            content: 'ü§ñ Bot Telegram VIP System\n\nüéØ Plateforme premium de mise en relation\nüîê S√©curit√© et discr√©tion garanties\n‚≠ê S√©lection VIP mise √† jour en temps r√©el\nüåç Couverture internationale',
            enabled: true
          }
        },
        socialMedia: {
          telegram: '',
          instagram: '',
          whatsapp: '',
          website: ''
        },
        vip: {
          enabled: true,
          title: 'üåü SECTION VIP PREMIUM',
          description: 'Nos plugs premium s√©lectionn√©s pour leur fiabilit√© et qualit√© de service',
          position: 'top'
        },
        filters: {
          byService: 'üîç Filtrer par service',
          byCountry: 'üåç Filtrer par pays',
          all: 'üìã Tous les plugs'
        },
        messages: {
          noPlugsFound: 'üòÖ Aucun plug trouv√© pour ces crit√®res.\nEssayez d\'autres filtres ou contactez-nous.',
          errorOccurred: '‚ùå Une erreur est survenue, veuillez r√©essayer dans quelques instants.'
        },
        boutique: {
          name: 'Bot Plugs VIP',
          logo: '',
          subtitle: 'Votre plateforme premium',
          backgroundImage: '',
          vipTitle: 'üëë Boutiques VIP Premium',
          vipSubtitle: '‚ú® D√©couvrez nos boutiques s√©lectionn√©es',
          searchTitle: 'üîç Rechercher',
          searchSubtitle: 'Trouvez ce que vous cherchez'
        }
      });
      
      await defaultConfig.save();
      console.log('‚úÖ Configuration par d√©faut cr√©√©e avec succ√®s');
      
    } else {
      console.log('‚ÑπÔ∏è Configuration existante trouv√©e');
      console.log('üìã Donn√©es:', {
        welcome: existingConfig.welcome?.text ? 'D√©fini' : 'Non d√©fini',
        buttons: existingConfig.buttons ? 'D√©fini' : 'Non d√©fini',
        boutique: existingConfig.boutique?.name || 'Non d√©fini'
      });
    }
    
    // Test de la configuration publique
    const config = await Config.findById('main');
    const publicConfig = {
      boutique: config?.boutique || {},
      welcome: config?.welcome || {},
      socialMedia: config?.socialMedia || {},
      messages: config?.messages || {},
      buttons: config?.buttons || {}
    };
    
    console.log('‚úÖ Configuration publique pr√™te:', Object.keys(publicConfig));
    
    console.log('üéâ Base de donn√©es r√©par√©e avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©paration:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion ferm√©e');
  }
}

// Ex√©cuter la r√©paration
if (require.main === module) {
  fixDatabase()
    .then(() => {
      console.log('‚úÖ R√©paration termin√©e');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå √âchec de la r√©paration:', error);
      process.exit(1);
    });
}

module.exports = fixDatabase;