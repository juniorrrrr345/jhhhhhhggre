require('dotenv').config();
const mongoose = require('mongoose');
const Plug = require('../src/models/Plug');

async function testPermanentLikes() {
  try {
    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000
    });
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // Test 1: Trouver un plug pour tester
    console.log('\nüìã Test 1: Recherche d\'un plug pour test...');
    const plugs = await Plug.find({ isActive: true }).limit(1);
    
    if (plugs.length === 0) {
      console.log('‚ùå Aucun plug actif trouv√© pour les tests');
      return;
    }
    
    const testPlug = plugs[0];
    console.log(`‚úÖ Plug de test trouv√©: ${testPlug.name}`);
    console.log(`üìä Likes actuels: ${testPlug.likes || 0}`);
    console.log(`üë• Utilisateurs qui ont lik√©: ${testPlug.likedBy?.length || 0}`);
    
    // Test 2: Simuler un premier like
    console.log('\n‚ù§Ô∏è Test 2: Simulation d\'un premier like...');
    const testUserId = 987654321; // ID utilisateur fictif diff√©rent
    
    // V√©rifier si l'utilisateur a d√©j√† lik√©
    const hasLiked = testPlug.likedBy.includes(testUserId);
    console.log(`üë§ Utilisateur ${testUserId} a d√©j√† lik√©: ${hasLiked ? '‚úÖ' : '‚ùå'}`);
    
    if (!hasLiked) {
      // Initialiser likeHistory si n√©cessaire
      if (!testPlug.likeHistory) {
        testPlug.likeHistory = [];
      }
      
      // Ajouter le like (permanent)
      testPlug.likedBy.push(testUserId);
      testPlug.likes += 1;
      
      // Ajouter √† l'historique
      testPlug.likeHistory.push({
        userId: testUserId,
        timestamp: Date.now(),
        action: 'like'
      });
      
      await testPlug.save();
      console.log(`‚úÖ Like ajout√©! Nouveaux likes: ${testPlug.likes}`);
    } else {
      console.log('‚ÑπÔ∏è L\'utilisateur a d√©j√† lik√© ce plug');
    }
    
    // Test 3: Simuler une tentative de second like (doit √™tre rejet√©e)
    console.log('\nüîÑ Test 3: Tentative de second like (doit √™tre rejet√©e)...');
    
    const refreshedPlug = await Plug.findById(testPlug._id);
    const alreadyLiked = refreshedPlug.likedBy.includes(testUserId);
    
    if (alreadyLiked) {
      console.log(`‚ù§Ô∏è L'utilisateur a d√©j√† lik√© ${refreshedPlug.name} ! (${refreshedPlug.likes} likes)`);
      console.log('‚úÖ Syst√®me de likes permanent fonctionne - pas de second like autoris√©');
    } else {
      console.log('‚ùå Erreur: L\'utilisateur devrait avoir d√©j√† lik√©');
    }
    
    // Test 4: Tester le bouton qui s'affiche
    console.log('\nüîò Test 4: Test du bouton de like...');
    
    // Simuler la cr√©ation du bouton
    let likeButtonText;
    if (refreshedPlug.likedBy.includes(testUserId)) {
      likeButtonText = '‚ù§Ô∏è Vous avez lik√© cette boutique';
    } else {
      likeButtonText = 'ü§ç Liker cette boutique';
    }
    
    console.log(`üîò Texte du bouton: "${likeButtonText}"`);
    
    if (likeButtonText.includes('‚ù§Ô∏è Vous avez lik√©')) {
      console.log('‚úÖ Bouton affiche correctement l\'√©tat "d√©j√† lik√©"');
    } else {
      console.log('‚ùå Bouton devrait afficher l\'√©tat "d√©j√† lik√©"');
    }
    
    // Test 5: Simuler un autre utilisateur qui like
    console.log('\nüë• Test 5: Autre utilisateur qui like...');
    const anotherUserId = 555666777;
    
    if (!refreshedPlug.likedBy.includes(anotherUserId)) {
      refreshedPlug.likedBy.push(anotherUserId);
      refreshedPlug.likes += 1;
      
      refreshedPlug.likeHistory.push({
        userId: anotherUserId,
        timestamp: Date.now(),
        action: 'like'
      });
      
      await refreshedPlug.save();
      console.log(`‚úÖ Autre utilisateur a lik√©! Nouveaux likes: ${refreshedPlug.likes}`);
    }
    
    // Test 6: V√©rifier la synchronisation temps r√©el
    console.log('\n‚è±Ô∏è Test 6: Synchronisation temps r√©el...');
    
    const finalPlug = await Plug.findById(testPlug._id);
    console.log(`üìä Likes finaux: ${finalPlug.likes}`);
    console.log(`üë• Utilisateurs qui ont lik√©: ${finalPlug.likedBy.length}`);
    console.log(`üìù Entr√©es dans l'historique: ${finalPlug.likeHistory.length}`);
    
    // Simuler l'affichage du message mis √† jour
    const likesCount = finalPlug.likes || 0;
    const likesDisplay = `‚ù§Ô∏è **${likesCount} like${likesCount !== 1 ? 's' : ''}**`;
    console.log(`üí¨ Affichage dans le message: "${likesDisplay}"`);
    
    // V√©rifier la coh√©rence
    const likeActions = finalPlug.likeHistory.filter(entry => entry.action === 'like').length;
    console.log(`üìà Actions de like dans l'historique: ${likeActions}`);
    console.log(`‚úÖ Coh√©rence: ${finalPlug.likes === likeActions ? 'OK' : 'ERREUR'}`);
    
    console.log('\nüéâ Tests termin√©s');
    
    // R√©sum√© final
    console.log('\nüìã R√©sum√©:');
    console.log(`- Syst√®me de likes permanent: ‚úÖ Fonctionnel`);
    console.log(`- Pas de possibilit√© de retirer: ‚úÖ Confirm√©`);
    console.log(`- Bouton adaptatif: ‚úÖ OK`);
    console.log(`- Synchronisation temps r√©el: ‚úÖ Test√©e`);
    console.log(`- Compteur de likes: ${finalPlug.likes} (${finalPlug.likedBy.length} utilisateurs)`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.error(error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion ferm√©e');
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData() {
  try {
    console.log('üßπ Nettoyage des donn√©es de test...');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000
    });
    
    const testUserIds = [987654321, 555666777];
    
    // Retirer les utilisateurs de test de tous les plugs
    for (const userId of testUserIds) {
      const result = await Plug.updateMany(
        { likedBy: userId },
        { 
          $pull: { 
            likedBy: userId,
            likeHistory: { userId: userId }
          },
          $inc: { likes: -1 }
        }
      );
      
      console.log(`‚úÖ Nettoy√© l'utilisateur ${userId} de ${result.modifiedCount} plugs`);
    }
    
    // Corriger les likes n√©gatifs
    await Plug.updateMany(
      { likes: { $lt: 0 } },
      { likes: 0 }
    );
    
    console.log('‚úÖ Likes n√©gatifs corrig√©s');
    
  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error.message);
  } finally {
    await mongoose.disconnect();
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    cleanupTestData()
      .then(() => {
        console.log('\n‚úÖ Nettoyage termin√©');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Nettoyage √©chou√©:', error.message);
        process.exit(1);
      });
  } else {
    testPermanentLikes()
      .then(() => {
        console.log('\n‚úÖ Tests du syst√®me de likes permanent termin√©s');
        console.log('\nüí° Pour nettoyer les donn√©es de test, lancez:');
        console.log('node scripts/test-permanent-likes.js --cleanup');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Tests √©chou√©s:', error.message);
        process.exit(1);
      });
  }
}

module.exports = { testPermanentLikes, cleanupTestData };