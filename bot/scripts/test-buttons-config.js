require('dotenv').config();
const mongoose = require('mongoose');
const Config = require('../src/models/Config');

async function testButtonsConfig() {
  try {
    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000
    });
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // Test 1: V√©rifier la structure de la configuration
    console.log('\nüìã Test 1: Structure de la configuration...');
    const config = await Config.findById('main');
    
    if (!config) {
      console.log('‚ùå Configuration non trouv√©e');
      return;
    }
    
    console.log('‚úÖ Configuration trouv√©e');
    console.log('üìä Structure:');
    console.log('- buttons:', !!config.buttons);
    console.log('  - contact:', !!config.buttons?.contact);
    console.log('  - info:', !!config.buttons?.info);
    console.log('- welcome.socialMedia:', !!config.welcome?.socialMedia);
    
    // Test 2: V√©rifier les boutons Info et Contact
    console.log('\nüîò Test 2: Boutons Info et Contact...');
    
    if (config.buttons) {
      if (config.buttons.contact) {
        console.log('üìû Bouton Contact:');
        console.log(`  - Texte: "${config.buttons.contact.text}"`);
        console.log(`  - Contenu: "${config.buttons.contact.content}"`);
        console.log(`  - Activ√©: ${config.buttons.contact.enabled}`);
      } else {
        console.log('‚ùå Bouton Contact manquant');
      }
      
      if (config.buttons.info) {
        console.log('‚ÑπÔ∏è Bouton Info:');
        console.log(`  - Texte: "${config.buttons.info.text}"`);
        console.log(`  - Contenu: "${config.buttons.info.content}"`);
        console.log(`  - Activ√©: ${config.buttons.info.enabled}`);
      } else {
        console.log('‚ùå Bouton Info manquant');
      }
    } else {
      console.log('‚ùå Section buttons manquante, initialisation...');
      
      config.buttons = {
        contact: {
          text: 'üìû Contact',
          content: 'Contactez-nous pour plus d\'informations.',
          enabled: true
        },
        info: {
          text: '‚ÑπÔ∏è Info',
          content: 'Informations sur notre plateforme.',
          enabled: true
        }
      };
      await config.save();
      console.log('‚úÖ Boutons initialis√©s');
    }
    
    // Test 3: V√©rifier les r√©seaux sociaux d'accueil
    console.log('\nüîó Test 3: R√©seaux sociaux d\'accueil...');
    
    if (config.welcome && config.welcome.socialMedia) {
      console.log(`üì± R√©seaux sociaux d'accueil: ${config.welcome.socialMedia.length} configur√©s`);
      
      config.welcome.socialMedia.forEach((social, index) => {
        console.log(`  ${index + 1}. ${social.emoji} ${social.name} ‚Üí ${social.url}`);
      });
      
      if (config.welcome.socialMedia.length === 0) {
        console.log('üìù Ajout d\'exemples de r√©seaux sociaux...');
        
        config.welcome.socialMedia = [
          {
            name: 'Telegram',
            emoji: 'üì±',
            url: 'https://t.me/exemple',
            order: 0
          },
          {
            name: 'WhatsApp',
            emoji: 'üí¨',
            url: 'https://wa.me/33123456789',
            order: 1
          }
        ];
        
        await config.save();
        console.log('‚úÖ Exemples ajout√©s');
      }
    } else {
      console.log('‚ùå Section welcome.socialMedia manquante, initialisation...');
      
      if (!config.welcome) {
        config.welcome = {};
      }
      
      config.welcome.socialMedia = [];
      await config.save();
      console.log('‚úÖ welcome.socialMedia initialis√©');
    }
    
    // Test 4: Simuler la cr√©ation du clavier principal
    console.log('\n‚å®Ô∏è Test 4: Simulation du clavier principal...');
    
    const { createMainKeyboard } = require('../src/utils/keyboards');
    
    try {
      const keyboard = createMainKeyboard(config);
      console.log('‚úÖ Clavier principal cr√©√© avec succ√®s');
      console.log('üìä Structure du clavier g√©n√©r√©e');
      
      // Analyser les boutons
      if (config.welcome?.socialMedia?.length > 0) {
        console.log(`üîó ${config.welcome.socialMedia.length} boutons de r√©seaux sociaux d'accueil`);
      }
      
      if (config.buttons?.contact?.enabled) {
        console.log(`üìû Bouton Contact: "${config.buttons.contact.text}"`);
      }
      
      if (config.buttons?.info?.enabled) {
        console.log(`‚ÑπÔ∏è Bouton Info: "${config.buttons.info.text}"`);
      }
      
    } catch (keyboardError) {
      console.error('‚ùå Erreur cr√©ation clavier:', keyboardError.message);
    }
    
    // Test 5: V√©rifier la compatibilit√© avec le panel admin
    console.log('\nüéõÔ∏è Test 5: Compatibilit√© panel admin...');
    
    const requiredFields = [
      'buttons.contact.text',
      'buttons.contact.content',
      'buttons.contact.enabled',
      'buttons.info.text', 
      'buttons.info.content',
      'buttons.info.enabled',
      'welcome.socialMedia'
    ];
    
    let allFieldsOk = true;
    for (const field of requiredFields) {
      const keys = field.split('.');
      let current = config;
      let exists = true;
      
      for (const key of keys) {
        if (current && typeof current === 'object' && key in current) {
          current = current[key];
        } else {
          exists = false;
          break;
        }
      }
      
      if (exists) {
        console.log(`‚úÖ ${field}: OK`);
      } else {
        console.log(`‚ùå ${field}: MANQUANT`);
        allFieldsOk = false;
      }
    }
    
    if (allFieldsOk) {
      console.log('‚úÖ Tous les champs requis sont pr√©sents');
    } else {
      console.log('‚ö†Ô∏è Certains champs sont manquants');
    }
    
    console.log('\nüéâ Tests termin√©s');
    
    // R√©sum√© final
    console.log('\nüìã R√©sum√©:');
    console.log(`- Boutons configur√©s: Contact(${config.buttons?.contact?.enabled ? '‚úÖ' : '‚ùå'}) Info(${config.buttons?.info?.enabled ? '‚úÖ' : '‚ùå'})`);
    console.log(`- R√©seaux sociaux d'accueil: ${config.welcome?.socialMedia?.length || 0} configur√©s`);
    console.log('- Panel admin: Compatible');
    console.log('- Clavier bot: Fonctionnel');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.error(error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion ferm√©e');
  }
}

// Fonction pour nettoyer les exemples de test
async function cleanupTestData() {
  try {
    console.log('üßπ Nettoyage des donn√©es de test...');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000
    });
    
    const config = await Config.findById('main');
    if (config && config.welcome && config.welcome.socialMedia) {
      // Supprimer les exemples ajout√©s par le test
      config.welcome.socialMedia = config.welcome.socialMedia.filter(
        social => !social.url.includes('exemple') && !social.url.includes('wa.me/33123456789')
      );
      
      await config.save();
      console.log('‚úÖ Exemples de test supprim√©s');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error.message);
  } finally {
    await mongoose.disconnect();
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    cleanupTestData()
      .then(() => {
        console.log('\n‚úÖ Nettoyage termin√©');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Nettoyage √©chou√©:', error.message);
        process.exit(1);
      });
  } else {
    testButtonsConfig()
      .then(() => {
        console.log('\n‚úÖ Tests des boutons et r√©seaux sociaux termin√©s');
        console.log('\nüí° Pour nettoyer les donn√©es de test, lancez:');
        console.log('node scripts/test-buttons-config.js --cleanup');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Tests √©chou√©s:', error.message);
        process.exit(1);
      });
  }
}

module.exports = { testButtonsConfig, cleanupTestData };