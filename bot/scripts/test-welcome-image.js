require('dotenv').config();
const mongoose = require('mongoose');
const Config = require('../src/models/Config');

async function testWelcomeImage() {
  try {
    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000
    });
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // Test 1: V√©rifier la structure actuelle
    console.log('\nüìã Test 1: Structure de la configuration...');
    const config = await Config.findById('main');
    
    if (config) {
      console.log('‚úÖ Configuration trouv√©e');
      console.log('üìä Structure welcome:');
      console.log('- text:', !!config.welcome?.text);
      console.log('- image:', config.welcome?.image ? `‚úÖ ${config.welcome.image}` : '‚ùå vide');
      console.log('- socialMedia:', !!config.welcome?.socialMedia);
    } else {
      console.log('‚ùå Configuration NON trouv√©e');
      return;
    }
    
    // Test 2: Ajouter une image de test si elle n'existe pas
    console.log('\nüß™ Test 2: Test avec image d\'exemple...');
    
    if (!config.welcome.image || config.welcome.image.trim() === '') {
      console.log('üìù Ajout d\'une image de test...');
      
      // Image d'exemple (URL d'une image de test publique)
      const testImageUrl = 'https://via.placeholder.com/800x400/4F46E5/FFFFFF?text=Bot+Welcome+Image';
      
      config.welcome.image = testImageUrl;
      await config.save();
      
      console.log('‚úÖ Image de test ajout√©e:', testImageUrl);
    } else {
      console.log('‚ÑπÔ∏è Image d√©j√† configur√©e:', config.welcome.image);
    }
    
    // Test 3: Simuler les diff√©rents cas d'usage
    console.log('\nüé≠ Test 3: Simulation des cas d\'usage...');
    
    // Cas 1: Menu principal (doit utiliser l'image d'accueil)
    console.log('üì± Cas 1: Menu principal');
    const welcomeImage = config.welcome?.image || null;
    const isPlugDetails = false;
    const plugImage = null;
    const imageToUse = plugImage || (!isPlugDetails ? welcomeImage : null);
    console.log(`   ‚Üí Image utilis√©e: ${imageToUse ? '‚úÖ Image d\'accueil' : '‚ùå Aucune'}`);
    
    // Cas 2: Menu des plugs (doit utiliser l'image d'accueil)
    console.log('üîå Cas 2: Menu des plugs');
    const imageToUse2 = plugImage || (!isPlugDetails ? welcomeImage : null);
    console.log(`   ‚Üí Image utilis√©e: ${imageToUse2 ? '‚úÖ Image d\'accueil' : '‚ùå Aucune'}`);
    
    // Cas 3: D√©tails d'un plug SANS image (ne doit PAS utiliser l'image d'accueil)
    console.log('üìÑ Cas 3: D√©tails plug sans image');
    const isPlugDetails3 = true;
    const plugImage3 = null;
    const imageToUse3 = plugImage3 || (!isPlugDetails3 ? welcomeImage : null);
    console.log(`   ‚Üí Image utilis√©e: ${imageToUse3 ? '‚ùå Erreur!' : '‚úÖ Aucune (correct)'}`);
    
    // Cas 4: D√©tails d'un plug AVEC image (doit utiliser l'image du plug)
    console.log('üìÑ Cas 4: D√©tails plug avec image');
    const isPlugDetails4 = true;
    const plugImage4 = 'https://example.com/plug-image.jpg';
    const imageToUse4 = plugImage4 || (!isPlugDetails4 ? welcomeImage : null);
    console.log(`   ‚Üí Image utilis√©e: ${imageToUse4 === plugImage4 ? '‚úÖ Image du plug' : '‚ùå Erreur!'}`);
    
    // Test 4: V√©rifier les champs requis pour le panel admin
    console.log('\nüéõÔ∏è Test 4: Compatibilit√© panel admin...');
    
    const requiredFields = [
      'welcome.text',
      'welcome.image',
      'boutique.name',
      'boutique.subtitle',
      'boutique.backgroundImage',
      'socialMedia.telegram',
      'socialMedia.whatsapp'
    ];
    
    let allFieldsOk = true;
    for (const field of requiredFields) {
      const keys = field.split('.');
      let current = config;
      let exists = true;
      
      for (const key of keys) {
        if (current && typeof current === 'object' && key in current) {
          current = current[key];
        } else {
          exists = false;
          break;
        }
      }
      
      if (exists) {
        console.log(`‚úÖ ${field}: OK`);
      } else {
        console.log(`‚ùå ${field}: MANQUANT`);
        allFieldsOk = false;
      }
    }
    
    if (allFieldsOk) {
      console.log('‚úÖ Tous les champs requis sont pr√©sents');
    } else {
      console.log('‚ö†Ô∏è Certains champs sont manquants');
    }
    
    console.log('\nüéâ Test termin√©');
    
    // R√©sum√© final
    console.log('\nüìã R√©sum√©:');
    console.log(`- Image d'accueil configur√©e: ${config.welcome.image ? '‚úÖ' : '‚ùå'}`);
    console.log(`- URL de l'image: ${config.welcome.image || 'Aucune'}`);
    console.log('- Logique d\'affichage: ‚úÖ');
    console.log('- Menus/sous-menus: ‚úÖ Utiliseront l\'image d\'accueil');
    console.log('- D√©tails des plugs: ‚úÖ N\'utiliseront PAS l\'image d\'accueil');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.error(error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion ferm√©e');
  }
}

// Ex√©cuter le test
if (require.main === module) {
  testWelcomeImage()
    .then(() => {
      console.log('\n‚úÖ Test d\'image d\'accueil termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Test √©chou√©:', error.message);
      process.exit(1);
    });
}

module.exports = testWelcomeImage;