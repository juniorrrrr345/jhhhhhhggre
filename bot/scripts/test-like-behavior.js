require('dotenv').config();
const mongoose = require('mongoose');
const Plug = require('../src/models/Plug');

async function testLikeBehavior() {
  try {
    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000
    });
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // Test 1: Trouver un plug pour tester
    console.log('\nüìã Test 1: Recherche d\'un plug pour test...');
    const plugs = await Plug.find({ isActive: true }).limit(1);
    
    if (plugs.length === 0) {
      console.log('‚ùå Aucun plug actif trouv√© pour les tests');
      return;
    }
    
    const testPlug = plugs[0];
    console.log(`‚úÖ Plug de test trouv√©: ${testPlug.name}`);
    console.log(`üìä Likes actuels: ${testPlug.likes || 0}`);
    
    // Test 2: Simuler un utilisateur qui a d√©j√† lik√©
    console.log('\n‚ù§Ô∏è Test 2: Simulation utilisateur qui a d√©j√† lik√©...');
    const testUserId = 123456789;
    
    // S'assurer que l'utilisateur a d√©j√† lik√©
    if (!testPlug.likedBy.includes(testUserId)) {
      testPlug.likedBy.push(testUserId);
      testPlug.likes += 1;
      
      if (!testPlug.likeHistory) {
        testPlug.likeHistory = [];
      }
      
      testPlug.likeHistory.push({
        userId: testUserId,
        timestamp: Date.now(),
        action: 'like'
      });
      
      await testPlug.save();
      console.log(`‚úÖ Utilisateur ${testUserId} ajout√© aux likes pour le test`);
    }
    
    // Test 3: Simuler le comportement du bouton pour utilisateur qui a d√©j√† lik√©
    console.log('\nüîò Test 3: Comportement bouton pour utilisateur qui a d√©j√† lik√©...');
    
    const refreshedPlug = await Plug.findById(testPlug._id);
    const hasLiked = refreshedPlug.likedBy.includes(testUserId);
    
    console.log(`üë§ Utilisateur ${testUserId} a d√©j√† lik√©: ${hasLiked ? '‚úÖ' : '‚ùå'}`);
    
    if (hasLiked) {
      console.log(`üîò Action: User ${testUserId} clique sur le bouton like`);
      console.log(`üí¨ R√©ponse: "‚ù§Ô∏è Vous avez d√©j√† lik√© ${refreshedPlug.name} ! (${refreshedPlug.likes} likes)"`);
      console.log(`üìù Message: AUCUN changement au message affich√©`);
      console.log(`‚å®Ô∏è Clavier: AUCUN changement au clavier`);
      console.log(`‚úÖ Comportement correct: Message et clavier restent inchang√©s`);
    }
    
    // Test 4: Simuler le bouton pour un nouvel utilisateur
    console.log('\nüÜï Test 4: Comportement bouton pour nouvel utilisateur...');
    const newUserId = 987654321;
    
    const hasLikedNew = refreshedPlug.likedBy.includes(newUserId);
    console.log(`üë§ Nouvel utilisateur ${newUserId} a d√©j√† lik√©: ${hasLikedNew ? '‚úÖ' : '‚ùå'}`);
    
    if (!hasLikedNew) {
      console.log(`üîò Action: User ${newUserId} clique sur le bouton like`);
      console.log(`üìà R√©sultat attendu:`);
      console.log(`  - Like ajout√©: ‚úÖ`);
      console.log(`  - Compteur incr√©ment√©: ${refreshedPlug.likes} ‚Üí ${refreshedPlug.likes + 1}`);
      console.log(`  - Message mis √† jour: ‚úÖ (temps r√©el)`);
      console.log(`  - Bouton change: "ü§ç Liker" ‚Üí "‚ù§Ô∏è Vous avez lik√©"`);
      console.log(`  - Notification: "‚ù§Ô∏è Vous avez lik√© ${refreshedPlug.name} ! (${refreshedPlug.likes + 1} likes)"`);
    }
    
    // Test 5: V√©rifier le texte du bouton
    console.log('\nüîò Test 5: Texte du bouton selon l\'√©tat...');
    
    // Pour utilisateur qui a d√©j√† lik√©
    let likeButtonText;
    if (refreshedPlug.likedBy.includes(testUserId)) {
      likeButtonText = '‚ù§Ô∏è Vous avez lik√© cette boutique';
    } else {
      likeButtonText = 'ü§ç Liker cette boutique';
    }
    console.log(`üë§ User ${testUserId} (a d√©j√† lik√©): "${likeButtonText}"`);
    
    // Pour nouvel utilisateur
    if (refreshedPlug.likedBy.includes(newUserId)) {
      likeButtonText = '‚ù§Ô∏è Vous avez lik√© cette boutique';
    } else {
      likeButtonText = 'ü§ç Liker cette boutique';
    }
    console.log(`üë§ User ${newUserId} (nouveau): "${likeButtonText}"`);
    
    // Test 6: V√©rifier la logique de gestion des likes
    console.log('\nüîç Test 6: Logique de gestion des likes...');
    
    console.log('üìã Conditions test√©es:');
    console.log(`‚úÖ Si hasLiked = true ‚Üí return answerCbQuery() SEULEMENT`);
    console.log(`‚úÖ Si hasLiked = false ‚Üí Ajouter like + mettre √† jour message`);
    console.log(`‚úÖ Aucune modification de message si d√©j√† lik√©`);
    console.log(`‚úÖ Mise √† jour temps r√©el seulement pour nouveaux likes`);
    
    console.log('\nüéâ Tests de comportement termin√©s');
    
    // R√©sum√© final
    console.log('\nüìã R√©sum√© du Comportement Corrig√©:');
    console.log(`üîò Bouton "‚ù§Ô∏è Vous avez lik√©": Click ‚Üí Notification simple, AUCUN changement`);
    console.log(`üîò Bouton "ü§ç Liker cette boutique": Click ‚Üí Like ajout√© + mise √† jour temps r√©el`);
    console.log(`üí¨ Message: Reste IDENTIQUE si utilisateur a d√©j√† lik√©`);
    console.log(`‚å®Ô∏è Clavier: Reste IDENTIQUE si utilisateur a d√©j√† lik√©`);
    console.log(`üöÄ Performance: Pas de reconstruction inutile du message`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.error(error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion ferm√©e');
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData() {
  try {
    console.log('üßπ Nettoyage des donn√©es de test...');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000
    });
    
    const testUserIds = [123456789, 987654321];
    
    // Retirer les utilisateurs de test
    for (const userId of testUserIds) {
      const result = await Plug.updateMany(
        { likedBy: userId },
        { 
          $pull: { 
            likedBy: userId,
            likeHistory: { userId: userId }
          },
          $inc: { likes: -1 }
        }
      );
      
      console.log(`‚úÖ Nettoy√© l'utilisateur ${userId} de ${result.modifiedCount} plugs`);
    }
    
    // Corriger les likes n√©gatifs
    await Plug.updateMany(
      { likes: { $lt: 0 } },
      { likes: 0 }
    );
    
    console.log('‚úÖ Donn√©es de test nettoy√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error.message);
  } finally {
    await mongoose.disconnect();
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    cleanupTestData()
      .then(() => {
        console.log('\n‚úÖ Nettoyage termin√©');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Nettoyage √©chou√©:', error.message);
        process.exit(1);
      });
  } else {
    testLikeBehavior()
      .then(() => {
        console.log('\n‚úÖ Tests du comportement bouton like termin√©s');
        console.log('\nüí° Pour nettoyer les donn√©es de test, lancez:');
        console.log('node scripts/test-like-behavior.js --cleanup');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Tests √©chou√©s:', error.message);
        process.exit(1);
      });
  }
}

module.exports = { testLikeBehavior, cleanupTestData };