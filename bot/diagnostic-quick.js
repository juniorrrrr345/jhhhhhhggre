require('dotenv').config();
const mongoose = require('mongoose');
const Config = require('./src/models/Config');

async function quickDiagnostic() {
  console.log('üîç Diagnostic rapide du bot...\n');
  
  try {
    // Test de connexion MongoDB
    console.log('1. üîå Test de connexion MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('   ‚úÖ MongoDB connect√© avec succ√®s');
    
    // Test de r√©cup√©ration de la configuration
    console.log('2. üìã Test de r√©cup√©ration de la configuration...');
    const config = await Config.findById('main');
    
    if (!config) {
      console.log('   ‚ùå Configuration non trouv√©e');
      return;
    }
    console.log('   ‚úÖ Configuration r√©cup√©r√©e avec succ√®s');
    
    // V√©rification des URLs des r√©seaux sociaux
    console.log('3. üîó V√©rification des URLs des r√©seaux sociaux...');
    let invalidUrls = 0;
    
    // R√©seaux sociaux d'accueil
    if (config.welcome && config.welcome.socialMedia) {
      config.welcome.socialMedia.forEach(social => {
        if (social.url.includes('@') && !social.url.startsWith('http')) {
          console.log(`   ‚ùå URL invalide (email): ${social.name} -> ${social.url}`);
          invalidUrls++;
        } else {
          console.log(`   ‚úÖ URL valide: ${social.name} -> ${social.url}`);
        }
      });
    }
    
    // R√©seaux sociaux globaux
    if (config.socialMedia) {
      for (const [key, url] of Object.entries(config.socialMedia)) {
        if (url && url.trim() !== '') {
          if (url.includes('@') && !url.startsWith('http')) {
            console.log(`   ‚ùå URL globale invalide (email): ${key} -> ${url}`);
            invalidUrls++;
          } else {
            console.log(`   ‚úÖ URL globale valide: ${key} -> ${url}`);
          }
        }
      }
    }
    
    if (invalidUrls === 0) {
      console.log('   ‚úÖ Toutes les URLs sont valides');
    } else {
      console.log(`   ‚ö†Ô∏è ${invalidUrls} URLs invalides d√©tect√©es`);
    }
    
    // Test du token bot
    console.log('4. ü§ñ V√©rification du token bot...');
    if (process.env.TELEGRAM_BOT_TOKEN) {
      console.log('   ‚úÖ Token bot configur√©');
    } else {
      console.log('   ‚ùå Token bot manquant');
    }
    
    console.log('\nüéâ Diagnostic termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur durant le diagnostic:', error.message);
  } finally {
    await mongoose.disconnect();
  }
}

quickDiagnostic();