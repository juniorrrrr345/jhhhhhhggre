const { Markup } = require('telegraf');

// Envoyer une notification d'approbation
const sendApprovalNotification = async (bot, application) => {
  try {
    const message = `üéâ **F√©licitations !**\n\n` +
      `Ta demande d'inscription en tant que plug **"${application.name}"** a √©t√© approuv√©e !\n\n` +
      `‚úÖ **Tu es maintenant un plug officiel !**\n\n` +
      `üìã **D√©tails :**\n` +
      `‚Ä¢ **Nom :** ${application.name}\n` +
      `‚Ä¢ **Localisation :** ${application.location.city}, ${application.location.country}\n` +
      `‚Ä¢ **Services :** ${getServicesText(application.services)}\n\n` +
      `üöÄ **Prochaines √©tapes :**\n` +
      `‚Ä¢ Tu appara√Ætras bient√¥t dans la liste des plugs\n` +
      `‚Ä¢ Les utilisateurs pourront te contacter via ${application.contact.telegram}\n` +
      `‚Ä¢ Assure-toi d'√™tre disponible pour r√©pondre aux demandes\n\n` +
      `Merci de rejoindre notre communaut√© ! üí™`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîå Voir tous les plugs', 'top_plugs')],
      [Markup.button.callback('üîô Menu principal', 'back_main')]
    ]);

    await bot.telegram.sendMessage(application.userId, message, {
      reply_markup: keyboard.reply_markup,
      parse_mode: 'Markdown'
    });

    console.log(`‚úÖ Notification d'approbation envoy√©e √† ${application.userId}`);
  } catch (error) {
    console.error('‚ùå Erreur notification approbation:', error);
  }
};

// Envoyer une notification de rejet
const sendRejectionNotification = async (bot, application, reason = '') => {
  try {
    const message = `‚ùå **Demande non approuv√©e**\n\n` +
      `Nous regrettons de t'informer que ta demande d'inscription en tant que plug **"${application.name}"** n'a pas √©t√© approuv√©e.\n\n` +
      `üìã **D√©tails de la demande :**\n` +
      `‚Ä¢ **Nom :** ${application.name}\n` +
      `‚Ä¢ **Localisation :** ${application.location.city}, ${application.location.country}\n` +
      `‚Ä¢ **Services :** ${getServicesText(application.services)}\n\n` +
      (reason ? `üìù **Raison :** ${reason}\n\n` : '') +
      `üîÑ **Tu peux :**\n` +
      `‚Ä¢ Modifier ton approche et soumettre une nouvelle demande\n` +
      `‚Ä¢ Nous contacter pour plus d'informations\n\n` +
      `Merci pour ton int√©r√™t ! üôè`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üíº Nouvelle demande', 'start_application')],
      [Markup.button.callback('üìû Contact', 'contact')],
      [Markup.button.callback('üîô Menu principal', 'back_main')]
    ]);

    await bot.telegram.sendMessage(application.userId, message, {
      reply_markup: keyboard.reply_markup,
      parse_mode: 'Markdown'
    });

    console.log(`‚úÖ Notification de rejet envoy√©e √† ${application.userId}`);
  } catch (error) {
    console.error('‚ùå Erreur notification rejet:', error);
  }
};

// Fonction utilitaire pour formater les services
const getServicesText = (services) => {
  const servicesList = [];
  if (services.includes('delivery')) servicesList.push('Livraison');
  if (services.includes('meetup')) servicesList.push('Meetup');
  if (services.includes('postal')) servicesList.push('Envoi postal');
  return servicesList.length > 0 ? servicesList.join(', ') : 'Aucun service sp√©cifi√©';
};

// Envoyer notification √† l'admin d'une nouvelle demande
const sendAdminNotification = async (bot, application, adminId) => {
  try {
    // Construction du message d√©taill√©
    let message = `üîî **NOUVELLE DEMANDE D'INSCRIPTION**\n\n`;
    message += `‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª\n\n`;
    
    // Informations utilisateur
    message += `üë§ **INFORMATIONS UTILISATEUR**\n`;
    message += `‚îú Nom : ${application.firstName} ${application.lastName}\n`;
    message += `‚îú Username : @${application.username || 'Non sp√©cifi√©'}\n`;
    message += `‚îî ID : ${application.userId}\n\n`;
    
    // Informations du plug
    message += `üè™ **INFORMATIONS DU PLUG**\n`;
    message += `‚îú Nom : ${application.name}\n`;
    message += `‚îú Description : ${application.description}\n`;
    message += `‚îú Ville : ${application.location.city}\n`;
    message += `‚îî Pays : ${application.countries && application.countries.length > 0 ? application.countries.join(', ') : application.location.country}\n\n`;
    
    // Services propos√©s avec d√©tails
    message += `üõ†Ô∏è **SERVICES PROPOS√âS**\n`;
    const services = application.services || [];
    
    if (services.includes('meetup')) {
      message += `\nü§ù **Meet Up :**\n`;
      if (application.departments?.meetup) {
        message += `${application.departments.meetup}\n`;
      } else {
        message += `Aucun d√©partement sp√©cifi√©\n`;
      }
    }
    
    if (services.includes('shipping')) {
      message += `\nüìÆ **Envoi postal :**\n`;
      if (application.departments?.shipping) {
        message += `${application.departments.shipping}\n`;
      } else {
        message += `‚úÖ Validation automatique\n`;
      }
    }
    
    if (services.includes('delivery')) {
      message += `\nüöö **Livraison :**\n`;
      if (application.departments?.delivery) {
        message += `${application.departments.delivery}\n`;
      } else {
        message += `Aucun d√©partement sp√©cifi√©\n`;
      }
    }
    
    // Contacts et r√©seaux sociaux
    message += `\nüì± **CONTACTS ET R√âSEAUX SOCIAUX**\n`;
    message += `‚îú Telegram : ${application.contact.telegram}\n`;
    if (application.contact.telegramChannel) message += `‚îú Canal Telegram : ${application.contact.telegramChannel}\n`;
    if (application.contact.telegramBot) message += `‚îú Bot Telegram : ${application.contact.telegramBot}\n`;
    if (application.contact.instagram) message += `‚îú Instagram : ${application.contact.instagram}\n`;
    if (application.contact.snapchat) message += `‚îú Snapchat : ${application.contact.snapchat}\n`;
    if (application.contact.potato) message += `‚îú Potato : ${application.contact.potato}\n`;
    if (application.contact.whatsapp) message += `‚îú WhatsApp : ${application.contact.whatsapp}\n`;
    if (application.contact.signal) message += `‚îú Signal : ${application.contact.signal}\n`;
    if (application.contact.session) message += `‚îú Session : ${application.contact.session}\n`;
    if (application.contact.threema) message += `‚îî Threema : ${application.contact.threema}\n`;
    
    // Photo
    message += `\nüì∏ **PHOTO DU PLUG**\n`;
    message += application.photo ? `‚úÖ Photo fournie (ID: ${application.photo})\n` : `‚ùå Aucune photo fournie\n`;
    
    // Date et statut
    message += `\nüìÖ **INFORMATIONS SUPPL√âMENTAIRES**\n`;
    message += `‚îú Date de soumission : ${new Date(application.submittedAt).toLocaleString('fr-FR')}\n`;
    message += `‚îî Statut : ${application.status === 'pending' ? '‚è≥ En attente' : application.status}\n`;
    
    message += `\n‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª\n`;
    message += `\nüí° **Rendez-vous sur le panel admin pour traiter cette demande.**`;

    // Envoyer le message avec la photo si disponible
    if (application.photo) {
      try {
        await bot.telegram.sendPhoto(adminId, application.photo, {
          caption: message,
          parse_mode: 'Markdown'
        });
      } catch (photoError) {
        // Si l'envoi avec photo √©choue, envoyer sans photo
        await bot.telegram.sendMessage(adminId, message, {
          parse_mode: 'Markdown'
        });
      }
    } else {
      await bot.telegram.sendMessage(adminId, message, {
        parse_mode: 'Markdown'
      });
    }

    console.log(`‚úÖ Notification admin d√©taill√©e envoy√©e pour demande ${application._id} √† l'admin ${adminId}`);
  } catch (error) {
    console.error(`‚ùå Erreur notification admin pour ${adminId}:`, error.message);
    console.error('D√©tails de l\'erreur:', {
      code: error.code,
      description: error.description,
      adminId: adminId,
      applicationId: application._id
    });
    throw error; // Re-lancer l'erreur pour qu'elle soit captur√©e dans applicationHandler
  }
};

module.exports = {
  sendApprovalNotification,
  sendRejectionNotification,
  sendAdminNotification,
  getServicesText
};