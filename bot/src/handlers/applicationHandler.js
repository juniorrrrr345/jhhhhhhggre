const PlugApplication = require('../models/PlugApplication');
const { Markup } = require('telegraf');
const { sendAdminNotification } = require('./notificationHandler');
const { getTranslation } = require('../utils/translations');

// Stockage temporaire des donn√©es du formulaire par utilisateur
const userForms = new Map();

// Stockage des derniers messages du bot (pour les supprimer avant nouvelle question)
const lastBotMessages = new Map();

// Liste des pays disponibles avec emojis
const COUNTRIES = [
  { code: 'FR', name: 'France', flag: 'üá´üá∑' },
  { code: 'BE', name: 'Belgique', flag: 'üáßüá™' },
  { code: 'CH', name: 'Suisse', flag: 'üá®üá≠' },
  { code: 'ES', name: 'Espagne', flag: 'üá™üá∏' },
  { code: 'IT', name: 'Italie', flag: 'üáÆüáπ' },
  { code: 'DE', name: 'Allemagne', flag: 'üá©üá™' },
  { code: 'NL', name: 'Pays-Bas', flag: 'üá≥üá±' },
  { code: 'MA', name: 'Maroc', flag: 'üá≤üá¶' },
  { code: 'OTHER', name: 'Autre', flag: 'üåç' }
];

// Fonction utilitaire pour √©diter les messages avec gestion robuste des erreurs
const safeEditMessage = async (ctx, message, options = {}, keepWelcomeImage = false) => {
  const userId = ctx.from.id;
  try {
    // Si on veut garder l'image d'accueil, on essaie plusieurs m√©thodes
    if (keepWelcomeImage) {
      const Config = require('../models/Config');
      const config = await Config.findById('main');
      const welcomeImage = config?.welcome?.image;
      
      if (welcomeImage) {
        try {
          // Essayer d'√©diter le media avec caption
          await ctx.editMessageMedia({
            type: 'photo',
            media: welcomeImage,
            caption: message,
            parse_mode: options.parse_mode || 'Markdown'
          }, {
            reply_markup: options.reply_markup
          });
          return;
        } catch (mediaError) {
          console.log('‚ö†Ô∏è editMessageMedia √©chou√©:', mediaError.message);
          
          // Fallback 1: Essayer d'√©diter la caption seulement
          try {
            await ctx.editMessageCaption(message, {
              parse_mode: options.parse_mode || 'Markdown',
              reply_markup: options.reply_markup
            });
            return;
          } catch (captionError) {
            console.log('‚ö†Ô∏è editMessageCaption √©chou√©:', captionError.message);
          }
        }
      }
    }
    
    // Essayer l'√©dition de texte normale
    try {
      await ctx.editMessageText(message, options);
    } catch (textError) {
      console.log('‚ö†Ô∏è editMessageText √©chou√©:', textError.message);
      
      // Fallback final: Supprimer et envoyer nouveau message
      try {
        await ctx.deleteMessage();
      } catch (deleteError) {
        console.log('‚ö†Ô∏è Impossible de supprimer le message:', deleteError.message);
      }
      
      // Envoyer un nouveau message
      if (keepWelcomeImage) {
        const Config = require('../models/Config');
        const config = await Config.findById('main');
        const welcomeImage = config?.welcome?.image;
        
        if (welcomeImage) {
          const sentMessage = await ctx.replyWithPhoto(welcomeImage, {
            caption: message,
            parse_mode: options.parse_mode || 'Markdown',
            reply_markup: options.reply_markup
          });
          lastBotMessages.set(userId, sentMessage.message_id);
        } else {
          const sentMessage = await ctx.reply(message, options);
          lastBotMessages.set(userId, sentMessage.message_id);
        }
      } else {
        const sentMessage = await ctx.reply(message, options);
        lastBotMessages.set(userId, sentMessage.message_id);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur safeEditMessage:', error.message);
    // Dernier fallback: message simple sans formatage
    try {
      await ctx.reply('‚úÖ Ta demande a √©t√© soumise avec succ√®s ! Tu recevras une r√©ponse prochainement.', {
        reply_markup: options.reply_markup
      });
    } catch (finalError) {
      console.error('‚ùå M√™me le fallback final a √©chou√©:', finalError.message);
    }
  }
};

// Gestionnaire pour d√©marrer le formulaire d'inscription
const handleStartApplication = async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    
    // R√©cup√©rer la langue actuelle de l'utilisateur
    const Config = require('../models/Config');
    const { getTranslation } = require('../utils/translations');
    
    const config = await Config.findById('main');
    const currentLang = config?.languages?.currentLanguage || 'fr';
    const customTranslations = config?.languages?.translations;
    
    console.log(`üåç Formulaire d'inscription en langue: ${currentLang}`);
    
    // V√©rifier si l'utilisateur a d√©j√† une demande en cours
    const existingApplication = await PlugApplication.findOne({ 
      userId: userId, 
      status: 'pending' 
    });
    
    if (existingApplication) {
      const submittedDate = existingApplication.submittedAt.toLocaleDateString(
        currentLang === 'en' ? 'en-US' : 'fr-FR'
      );
      
      const message = `${getTranslation('registration.pendingTitle', currentLang, customTranslations)}\n\n` +
        `${getTranslation('registration.pendingMessage', currentLang, customTranslations)}\n` +
        `${currentLang === 'fr' ? 'Elle a √©t√© soumise le' : 'It was submitted on'} ${submittedDate}\n\n` +
        `${getTranslation('registration.pendingStatus', currentLang, customTranslations)}\n\n` +
        `${getTranslation('registration.pendingWait', currentLang, customTranslations)}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(getTranslation('registration.backToMenu', currentLang, customTranslations), 'back_main')]
      ]);
      
      return await safeEditMessage(ctx, message, {
        reply_markup: keyboard.reply_markup,
        parse_mode: 'Markdown'
      }, true); // keepWelcomeImage = true
    }
    
    // Initialiser le formulaire
    userForms.set(userId, {
      step: 'name',
      data: {
        userId: userId,
        username: ctx.from.username || '',
        firstName: ctx.from.first_name || '',
        lastName: ctx.from.last_name || ''
      }
    });
    
    const message = `${getTranslation('registration.title', currentLang, customTranslations)}\n\n` +
      `‚∏ª\n\n` +
      `${getTranslation('registration.step1', currentLang, customTranslations)}\n\n` +
      `${getTranslation('registration.letsStart', currentLang, customTranslations)}\n\n` +
      `${getTranslation('registration.plugNameQuestion', currentLang, customTranslations)}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(getTranslation('registration.cancel', currentLang, customTranslations), 'cancel_application')]
    ]);
    
    await safeEditMessage(ctx, message, {
      reply_markup: keyboard.reply_markup,
      parse_mode: 'Markdown'
    }, true); // keepWelcomeImage = true
    
  } catch (error) {
    console.error('Erreur dans handleStartApplication:', error);
    await ctx.answerCbQuery('‚ùå Erreur lors du d√©marrage').catch(() => {});
  }
};

// Gestionnaire pour les messages texte du formulaire
const handleFormMessage = async (ctx) => {
  const userId = ctx.from.id;
  const userForm = userForms.get(userId);
  
  if (!userForm) {
    return; // Pas de formulaire en cours
  }
  
  const text = ctx.message.text.trim();
  
  // Supprimer le message de l'utilisateur pour garder le chat propre
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // Ignorer l'erreur si on ne peut pas supprimer
  }
  
  try {
    switch (userForm.step) {
              case 'name':
          // R√©cup√©rer la langue pour les erreurs
          const Config = require('../models/Config');
          const config = await Config.findById('main');
          const currentLang = config?.languages?.currentLanguage || 'fr';
          const customTranslations = config?.languages?.translations;
          
          if (text.length < 2) {
            return await ctx.reply(getTranslation('registration.error.nameLength', currentLang, customTranslations));
          }
          
          userForm.data.name = text;
          userForm.step = 'telegram';
          userForms.set(userId, userForm);
          
          await askTelegramReply(ctx);
          break;
        
              case 'telegram':
          if (!text.startsWith('@') && !text.includes('t.me/')) {
            return await ctx.reply(getTranslation('registration.error.telegramFormat', currentLang, customTranslations));
          }

          userForm.data.telegram = text;
          userForm.step = 'telegram_channel';
          userForms.set(userId, userForm);
          
          await replyWithStep(ctx, 'telegram_channel');
          break;
          
        case 'telegram_channel':
          if (!text.includes('t.me/')) {
            return await ctx.reply(getTranslation('registration.error.telegramChannelFormat', currentLang, customTranslations));
          }

          userForm.data.telegramChannel = text;
          userForm.step = 'instagram';
          userForms.set(userId, userForm);
          
          await replyWithStep(ctx, 'instagram');
          break;
        
              case 'instagram':
          if (!text.startsWith('https://www.instagram.com/') && !text.startsWith('@')) {
            return await ctx.reply(getTranslation('registration.error.instagramFormat', currentLang, customTranslations));
          }

          userForm.data.instagram = text;
          userForm.step = 'potato';
          userForms.set(userId, userForm);
          
          await replyWithStep(ctx, 'potato');
          break;
        
              case 'potato':
          if (!text.startsWith('https://potato.chat/') && !text.startsWith('https://')) {
            return await ctx.reply(getTranslation('registration.error.potatoFormat', currentLang, customTranslations));
          }

          userForm.data.potato = text;
          userForm.step = 'snapchat';
          userForms.set(userId, userForm);
          
          await askSnapchat(ctx);
          break;
        
      case 'snapchat':
        if (!text.startsWith('https://www.snapchat.com/') && !text.startsWith('https://')) {
          return await ctx.reply(getTranslation('registration.error.snapchatFormat', currentLang, customTranslations));
        }

        userForm.data.snapchat = text;
        userForm.step = 'whatsapp';
        
        await askWhatsApp(ctx);
        break;
        
      case 'whatsapp':
        if (!text.startsWith('https://wa.me/') && !text.startsWith('https://')) {
          return await ctx.reply(getTranslation('registration.error.whatsappFormat', currentLang, customTranslations));
        }

        userForm.data.whatsapp = text;
        userForm.step = 'signal';
        
        await askSignal(ctx);
        break;
        
      case 'signal':
        if (text.length < 2) {
          return await ctx.reply(getTranslation('registration.error.signalFormat', currentLang, customTranslations));
        }

        userForm.data.signal = text;
        userForm.step = 'session';
        
        await askSession(ctx);
        break;
        
      case 'session':
        if (text.length < 2) {
          return await ctx.reply(getTranslation('registration.error.sessionFormat', currentLang, customTranslations));
        }

        userForm.data.session = text;
        userForm.step = 'threema';
        
        await askThreema(ctx);
        break;
        
      case 'threema':
        if (!text.startsWith('https://')) {
          return await ctx.reply(getTranslation('registration.error.urlFormat', currentLang, customTranslations));
        }

        userForm.data.threema = text;
        userForm.step = 'country';
        
        await askCountry(ctx);
        break;
        
      case 'city':
        if (text.length < 2) {
          return await ctx.reply(getTranslation('registration.error.cityLength', currentLang, customTranslations));
        }
        
        userForm.data.city = text;
        userForm.step = 'services';
        
        await askServices(ctx);
        break;
        
      case 'departments_meetup':
        if (text.length < 2) {
          return await ctx.reply(getTranslation('registration.error.departmentsLength', currentLang, customTranslations));
        }
        
        userForm.data.departmentsMeetup = text;
        
        // Si livraison est aussi s√©lectionn√©, demander les d√©partements livraison
        if (userForm.data.services.delivery.enabled) {
          userForm.step = 'departments_delivery';
          userForms.set(userId, userForm);
          
          await replyWithStep(ctx, 'departments_delivery');
        } else {
          // Sinon passer directement √† la photo
          userForm.step = 'photo';
          userForms.set(userId, userForm);
          await askPhoto(ctx);
        }
        break;
        
      case 'departments_delivery':
        if (text.length < 2) {
          return await ctx.reply('‚ùå Les d√©partements doivent faire au moins 2 caract√®res. R√©essaie :');
        }
        
        userForm.data.departmentsDelivery = text;
        userForm.step = 'photo';
        
        await askPhoto(ctx);
        break;
    }
    
    userForms.set(userId, userForm);
    
  } catch (error) {
    console.error('Erreur dans handleFormMessage:', error);
    // R√©cup√©rer la langue pour les erreurs
    try {
      const Config = require('../models/Config');
      const config = await Config.findById('main');
      const currentLang = config?.languages?.currentLanguage || 'fr';
      const customTranslations = config?.languages?.translations;
      await ctx.reply(getTranslation('registration.error.general', currentLang, customTranslations));
    } catch (langError) {
      // Fallback en fran√ßais si erreur de r√©cup√©ration de langue
      await ctx.reply('‚ùå Une erreur est survenue. R√©essaie ou tape /start pour recommencer.');
    }
  }
};

// Demander Telegram
const askTelegram = async (ctx) => {
  const message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
    `‚∏ª\n\n` +
    `üü¶ **√âtape 2 : Lien Telegram**\n\n` +
    `üîó Entrez votre lien Telegram (format : @username ou https://t.me/username)`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Fonction pour g√©n√©rer le r√©capitulatif des r√©ponses
const generateSummary = (ctx, userForm) => {
  try {
    const user = ctx.from;
    const data = userForm?.data || {};
    
    let summary = `üë§ **${user.first_name || 'Utilisateur'}${user.last_name ? ` ${user.last_name}` : ''}**${user.username ? ` (@${user.username})` : ''}\n\n`;
    summary += `üìã **Progression :**\n`;
  
  if (data.name) summary += `‚úÖ Nom de Plug : ${data.name}\n`;
  if (data.telegram) summary += `‚úÖ Telegram : ${data.telegram}\n`;
  if (data.telegramChannel) summary += `‚úÖ Canal Telegram : ${data.telegramChannel}\n`;
  if (data.instagram) summary += `‚úÖ Instagram : ${data.instagram}\n`;
  if (data.potato) summary += `‚úÖ Potato : ${data.potato}\n`;
  if (data.snapchat) summary += `‚úÖ Snapchat : ${data.snapchat}\n`;
  if (data.whatsapp) summary += `‚úÖ WhatsApp : ${data.whatsapp}\n`;
  if (data.signal) summary += `‚úÖ Signal : ${data.signal}\n`;
  if (data.session) summary += `‚úÖ Session : ${data.session}\n`;
  if (data.threema) summary += `‚úÖ Threema : ${data.threema}\n`;
    if (data.country) summary += `‚úÖ Pays : ${data.country}\n`;
    
    return summary;
  } catch (error) {
    console.error('Erreur dans generateSummary:', error);
    return `üë§ **Utilisateur**\n\nüìã **Progression :**\n`;
  }
};

// Fonction centralis√©e pour afficher les √©tapes avec ctx.reply (√©vite les conflits d'√©dition)
const replyWithStep = async (ctx, step) => {
  const userId = ctx.from.id;
  const userForm = userForms.get(userId);
  
  // R√©cup√©rer la langue actuelle
  const Config = require('../models/Config');
  const config = await Config.findById('main');
  const currentLang = config?.languages?.currentLanguage || 'fr';
  const customTranslations = config?.languages?.translations;
  
  // Supprimer l'ancien message du bot s'il existe
  const lastBotMessageId = lastBotMessages.get(userId);
  if (lastBotMessageId) {
    try {
      await ctx.telegram.deleteMessage(ctx.chat.id, lastBotMessageId);
    } catch (error) {
      // Ignorer l'erreur si le message ne peut pas √™tre supprim√©
    }
  }
  
  // G√©n√©rer le r√©capitulatif
  const summary = generateSummary(ctx, userForm);
  
  let message = '';
  let keyboard = null;
  
  switch (step) {
    case 'telegram':
      message = `${getTranslation('registration.title', currentLang, customTranslations)}\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `${getTranslation('registration.step2', currentLang, customTranslations)}\n\n` +
        `${getTranslation('registration.telegramQuestion', currentLang, customTranslations)}`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(getTranslation('registration.cancel', currentLang, customTranslations), 'cancel_application')]
      ]);
      break;
      
    case 'telegram_channel':
      message = `${getTranslation('registration.title', currentLang, customTranslations)}\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `${getTranslation('registration.step3', currentLang, customTranslations)}\n\n` +
        `${getTranslation('registration.telegramChannelQuestion', currentLang, customTranslations)}\n\n` +
        `${getTranslation('registration.canSkip', currentLang, customTranslations)}`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(getTranslation('registration.skipStep', currentLang, customTranslations), 'skip_telegram_channel')],
        [Markup.button.callback(getTranslation('registration.cancel', currentLang, customTranslations), 'cancel_application')]
      ]);
      break;
      
    case 'instagram':
      message = `${getTranslation('registration.title', currentLang, customTranslations)}\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `${getTranslation('registration.step4', currentLang, customTranslations)}\n\n` +
        `${getTranslation('registration.instagramQuestion', currentLang, customTranslations)}\n\n` +
        `${getTranslation('registration.canSkip', currentLang, customTranslations)}`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(getTranslation('registration.skipStep', currentLang, customTranslations), 'skip_instagram')],
        [Markup.button.callback(getTranslation('registration.cancel', currentLang, customTranslations), 'cancel_application')]
      ]);
      break;
      
    case 'potato':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtapes R√©seaux suppl√©mentaires :**\n\n` +
        `Entrez votre lien **Potato** (commen√ßant par https://)\n\n` +
        `Plateformes :\n` +
        `\t‚Ä¢\tPotato\n` +
        `\t‚Ä¢\tSnapchat\n` +
        `\t‚Ä¢\tWhatsApp\n` +
        `\t‚Ä¢\tSignal\n` +
        `\t‚Ä¢\tSession (identifiant libre)\n` +
        `\t‚Ä¢\tThreema`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_potato')],
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
      
    case 'snapchat':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtapes R√©seaux suppl√©mentaires :**\n\n` +
        `Entrez votre lien **Snapchat** (commen√ßant par https://)\n\n` +
        `Plateformes restantes : Snapchat, WhatsApp, Signal, Session, Threema`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_snapchat')],
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
      
    case 'whatsapp':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtapes R√©seaux suppl√©mentaires :**\n\n` +
        `Entrez votre lien **WhatsApp** (commen√ßant par https://)\n\n` +
        `Plateformes restantes : WhatsApp, Signal, Session, Threema`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_whatsapp')],
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
      
    case 'signal':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtapes R√©seaux suppl√©mentaires :**\n\n` +
        `Entrez votre lien **Signal** (commen√ßant par https://)\n\n` +
        `Plateformes restantes : Signal, Session, Threema`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_signal')],
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
      
    case 'session':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtapes R√©seaux suppl√©mentaires :**\n\n` +
        `Entrez votre **Session** (identifiant libre)\n\n` +
        `Plateformes restantes : Session, Threema`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_session')],
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
      
    case 'threema':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtapes R√©seaux suppl√©mentaires :**\n\n` +
        `Entrez votre lien **Threema** (commen√ßant par https://)\n\n` +
        `Derni√®re plateforme !`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_threema')],
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
      
    case 'departments_meetup':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtape 13 : D√©partements pour Meetup**\n\n` +
        `üìç Indique les d√©partements pour le **Meetup** (ex: 75, 92, 93) :`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
      
    case 'departments_delivery':
      message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
        `${summary}` +
        `‚∏ª\n\n` +
        `üü¶ **√âtape 14 : D√©partements pour Livraison**\n\n` +
        `üöö Indique les d√©partements pour la **Livraison** (ex: 75, 94...) :`;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
      ]);
      break;
  }
  
  if (message) {
    const sentMessage = await ctx.reply(message, {
      reply_markup: keyboard ? keyboard.reply_markup : undefined,
      parse_mode: 'Markdown'
    });
    
    // Sauvegarder l'ID du message pour le supprimer √† la prochaine √©tape
    lastBotMessages.set(userId, sentMessage.message_id);
  } else {
    console.error('Aucun message g√©n√©r√© pour l\'√©tape:', step);
    throw new Error(`√âtape non support√©e: ${step}`);
  }
};

// Version reply pour √©viter les conflits d'√©dition (supprime l'ancien message)
const askTelegramReply = async (ctx) => {
  await replyWithStep(ctx, 'telegram');
};

// Demander Canal Telegram
const askTelegramChannel = async (ctx) => {
  const message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
    `‚∏ª\n\n` +
    `üü¶ **√âtape 3 : Lien Canal Telegram**\n\n` +
    `üîó Entrez le lien de votre **canal Telegram** (format : https://t.me/username)\n\n` +
    `‚ö†Ô∏è Tu peux aussi passer cette √©tape.`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_telegram_channel')],
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander Instagram
const askInstagram = async (ctx) => {
  const message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
    `‚∏ª\n\n` +
    `üü¶ **√âtape 4 : Lien Instagram**\n\n` +
    `üì∏ Entrez votre lien Instagram (https://www.instagram.com/username)\n\n` +
    `‚ö†Ô∏è Tu peux aussi passer cette √©tape.`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚è≠Ô∏è Passer cette √©tape', 'skip_instagram')],
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander Potato
const askPotato = async (ctx) => {
  const Config = require('../models/Config');
  const config = await Config.findById('main');
  const currentLang = config?.languages?.currentLanguage || 'fr';
  const customTranslations = config?.languages?.translations;

  const message = `${getTranslation('registration.title', currentLang, customTranslations)}\n\n` +
    `‚∏ª\n\n` +
    `${getTranslation('registration.step5', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.potatoQuestion', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.canSkip', currentLang, customTranslations)}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback(getTranslation('registration.skipStep', currentLang, customTranslations), 'skip_potato')],
    [Markup.button.callback(getTranslation('registration.cancel', currentLang, customTranslations), 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander Snapchat
const askSnapchat = async (ctx) => {
  const Config = require('../models/Config');
  const config = await Config.findById('main');
  const currentLang = config?.languages?.currentLanguage || 'fr';
  const customTranslations = config?.languages?.translations;

  const message = `${getTranslation('registration.title', currentLang, customTranslations)}\n\n` +
    `‚∏ª\n\n` +
    `${getTranslation('registration.step6', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.snapchatQuestion', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.canSkip', currentLang, customTranslations)}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback(getTranslation('registration.skipStep', currentLang, customTranslations), 'skip_snapchat')],
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander WhatsApp
const askWhatsApp = async (ctx) => {
  const Config = require('../models/Config');
  const config = await Config.findById('main');
  const currentLang = config?.languages?.currentLanguage || 'fr';
  const customTranslations = config?.languages?.translations;

  const message = `${getTranslation('registration.title', currentLang, customTranslations)}\n\n` +
    `‚∏ª\n\n` +
    `${getTranslation('registration.step7', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.whatsappQuestion', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.canSkip', currentLang, customTranslations)}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback(getTranslation('registration.skipStep', currentLang, customTranslations), 'skip_whatsapp')],
    [Markup.button.callback(getTranslation('registration.cancel', currentLang, customTranslations), 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander Signal
const askSignal = async (ctx) => {
  const userForm = userForms.get(ctx.from.id);
  const message = `üìù **R√©capitulatif de votre inscription :**\n\n` +
    `üìù Nom de Plug: ${userForm.data.name}\n` +
    `üîó Telegram: ${userForm.data.telegram}\n\n` +
    `Entrez votre lien Signal (commen√ßant par https://):`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚û°Ô∏è Passer cette √©tape', 'skip_signal')],
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander Session
const askSession = async (ctx) => {
  const userForm = userForms.get(ctx.from.id);
  const message = `üìù **R√©capitulatif de votre inscription :**\n\n` +
    `üìù Nom de Plug: ${userForm.data.name}\n` +
    `üîó Telegram: ${userForm.data.telegram}\n\n` +
    `Entrez votre identifiant Session (texte libre):`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚û°Ô∏è Passer cette √©tape', 'skip_session')],
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander Threema
const askThreema = async (ctx) => {
  const userForm = userForms.get(ctx.from.id);
  const message = `üìù **R√©capitulatif de votre inscription :**\n\n` +
    `üìù Nom de Plug: ${userForm.data.name}\n` +
    `üîó Telegram: ${userForm.data.telegram}\n\n` +
    `Entrez votre lien Threema (commen√ßant par https://):`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚û°Ô∏è Passer cette √©tape', 'skip_threema')],
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander le pays avec boutons
const askCountry = async (ctx) => {
  const message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
    `‚∏ª\n\n` +
    `üü¶ **√âtape 11 : Pays d'activit√©**\n\n` +
    `üåç Dans quel pays op√®res-tu principalement ?`;
  
  // Cr√©er les boutons de pays (3 par ligne)
  const countryButtons = [];
  for (let i = 0; i < COUNTRIES.length; i += 3) {
    const row = COUNTRIES.slice(i, i + 3).map(country => 
      Markup.button.callback(`${country.flag} ${country.name}`, `country_${country.code}`)
    );
    countryButtons.push(row);
  }
  
  // Ajouter boutons d'action
  countryButtons.push([
    Markup.button.callback('üåç Tous les pays', 'country_all')
  ]);
  
  const keyboard = Markup.inlineKeyboard(countryButtons);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Gestionnaire pour la s√©lection de pays
const handleCountrySelection = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userForm = userForms.get(userId);
    
    if (!userForm || userForm.step !== 'country') {
      return await ctx.answerCbQuery('‚ùå Erreur de formulaire');
    }
    
    const countryCode = ctx.callbackQuery.data.replace('country_', '');
    const selectedCountry = COUNTRIES.find(c => c.code === countryCode);
    
    if (!selectedCountry && countryCode !== 'all') {
      return await ctx.answerCbQuery('‚ùå Pays invalide');
    }
    
    userForm.data.country = selectedCountry ? selectedCountry.name : 'Tous les pays';
    userForm.data.countryCode = countryCode;
    userForm.step = 'services';
    userForms.set(userId, userForm);
    
    await askServices(ctx);
    await ctx.answerCbQuery(`Pays s√©lectionn√© : ${userForm.data.country}`);
    
  } catch (error) {
    console.error('Erreur dans handleCountrySelection:', error);
    await ctx.answerCbQuery('‚ùå Erreur');
  }
};

// Demander les services
const askServices = async (ctx) => {
  const message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
    `‚∏ª\n\n` +
    `üü¶ **√âtape 12 : Services propos√©s**\n\n` +
    `üì¶ Quels services proposes-tu ?\n` +
    `(S√©lectionne tous ceux qui s'appliquent)\n\n` +
    `‚òëÔ∏è Meetup\n` +
    `‚òëÔ∏è Livraison\n` +
    `‚òëÔ∏è Envoi Postal`;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üìç Meetup', 'service_meetup'),
      Markup.button.callback('üöö Livraison', 'service_delivery')
    ],
    [Markup.button.callback('‚úàÔ∏è Envoi Postal', 'service_postal')],
    [Markup.button.callback('‚úÖ Terminer la s√©lection', 'services_done')],
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Gestionnaires pour les services
const handleServiceToggle = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userForm = userForms.get(userId);
    
    if (!userForm || userForm.step !== 'services') {
      return await ctx.answerCbQuery('‚ùå Erreur de formulaire');
    }
    
    const serviceType = ctx.callbackQuery.data.replace('service_', '');
    
    if (!userForm.data.services) {
      userForm.data.services = {
        delivery: { enabled: false },
        postal: { enabled: false },
        meetup: { enabled: false }
      };
    }
    
    // Toggle le service
    userForm.data.services[serviceType].enabled = !userForm.data.services[serviceType].enabled;
    
    userForms.set(userId, userForm);
    
    // Mettre √† jour l'affichage
    const services = userForm.data.services;
    let servicesText = '';
    
    if (services.meetup.enabled) servicesText += 'üìç Meetup ‚úÖ\n';
    if (services.delivery.enabled) servicesText += 'üöö Livraison ‚úÖ\n';
    if (services.postal.enabled) servicesText += '‚úàÔ∏è Envoi Postal ‚úÖ\n';
    
    const message = `üìù **R√©capitulatif de votre inscription :**\n\n` +
      `üìù Nom de Plug: ${userForm.data.name}\n` +
      `üîó Telegram: ${userForm.data.telegram}\n` +
      `üåç Pays: ${userForm.data.country}\n` +
      `üõ†Ô∏è Services: ${servicesText}\n\n` +
      `Quels services proposez-vous? (S√©lectionnez tous ceux qui s'appliquent)`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          services.meetup.enabled ? 'üìç Meetup ‚úÖ' : 'üìç Meetup',
          'service_meetup'
        ),
        Markup.button.callback(
          services.delivery.enabled ? 'üöö Livraison ‚úÖ' : 'üöö Livraison',
          'service_delivery'
        )
      ],
      [
        Markup.button.callback(
          services.postal.enabled ? '‚úàÔ∏è Envoi Postal ‚úÖ' : '‚úàÔ∏è Envoi Postal',
          'service_postal'
        )
      ],
      [Markup.button.callback('‚úÖ Terminer la s√©lection', 'services_done')],
      [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
    ]);
    
    await safeEditMessage(ctx, message, {
      reply_markup: keyboard.reply_markup,
      parse_mode: 'Markdown'
    });
    
    await ctx.answerCbQuery();
    
  } catch (error) {
    console.error('Erreur dans handleServiceToggle:', error);
    await ctx.answerCbQuery('‚ùå Erreur');
  }
};

// Terminer les services et passer aux d√©partements
const handleServicesDone = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userForm = userForms.get(userId);
    
    if (!userForm) {
      return await ctx.answerCbQuery('‚ùå Erreur de formulaire');
    }
    
    const services = userForm.data.services;
    if (!services.delivery.enabled && !services.postal.enabled && !services.meetup.enabled) {
      return await ctx.answerCbQuery('‚ùå Tu dois s√©lectionner au moins un service');
    }
    
    // Si meetup est s√©lectionn√©, demander les d√©partements meetup
    if (services.meetup.enabled) {
      userForm.step = 'departments_meetup';
      userForms.set(userId, userForm);
      
      await replyWithStep(ctx, 'departments_meetup');
    } else {
      // Sinon passer directement √† la photo
      userForm.step = 'photo';
      userForms.set(userId, userForm);
      await askPhoto(ctx);
    }
    
    await ctx.answerCbQuery();
    
  } catch (error) {
    console.error('Erreur dans handleServicesDone:', error);
    await ctx.answerCbQuery('‚ùå Erreur');
  }
};

// Demander la photo
const askPhoto = async (ctx) => {
  const message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
    `‚∏ª\n\n` +
    `üü¶ **√âtape 15 : Envoi du logo**\n\n` +
    `üñºÔ∏è Envoie ton **logo** (obligatoire pour finaliser ton inscription)\n\n` +
    `‚ö†Ô∏è Tu peux envoyer une image ici.`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚ùå Annuler', 'cancel_application')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Demander la confirmation
const askConfirmation = async (ctx) => {
  const userForm = userForms.get(ctx.from.id);
  const message = `üõ†Ô∏è **FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug**\n\n` +
    `‚∏ª\n\n` +
    `üü¢ **√âtape 16 : Confirmation**\n\n` +
    `‚úÖ Voici le r√©capitulatif final :\n\n` +
    `‚Ä¢ Nom de Plug : ${userForm.data.name}\n` +
    `‚Ä¢ Telegram : ${userForm.data.telegram}\n` +
    `‚Ä¢ Pays : ${userForm.data.country}\n` +
    `‚Ä¢ Services : ${getServicesText(userForm.data.services)}\n` +
    `${userForm.data.departmentsMeetup ? `‚Ä¢ Meetup : ${userForm.data.departmentsMeetup}\n` : ''}` +
    `${userForm.data.departmentsDelivery ? `‚Ä¢ Livraison : ${userForm.data.departmentsDelivery}\n` : ''}` +
    `‚Ä¢ Logo : ‚úîÔ∏è Re√ßu\n\n` +
    `Confirmer l'inscription ?`;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('‚úÖ Confirmer', 'confirm_application'),
      Markup.button.callback('‚ùå Annuler', 'cancel_application')
    ]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  });
};

// Gestionnaire pour les photos
const handlePhoto = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userForm = userForms.get(userId);
    
    if (!userForm || userForm.step !== 'photo') {
      return;
    }
    
    // V√©rifier que c'est bien une photo
    if (!ctx.message.photo || ctx.message.photo.length === 0) {
      return await ctx.reply('‚ùå Merci d\'envoyer une photo valide.');
    }
    
    // R√©cup√©rer la photo de meilleure qualit√©
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    
    // Sauvegarder les infos de la photo
    userForm.data.photo = {
      fileId: photo.file_id,
      fileSize: photo.file_size,
      width: photo.width,
      height: photo.height
    };
    
    userForm.step = 'confirmation';
    userForms.set(userId, userForm);
    
    // Confirmer r√©ception et passer √† la confirmation
    await ctx.reply('‚úÖ Photo re√ßue !');
    
    // Passer √† l'√©tape de confirmation
    await askConfirmation(ctx);
    
  } catch (error) {
    console.error('Erreur dans handlePhoto:', error);
    await ctx.reply('‚ùå Erreur lors du traitement de la photo. R√©essaie.');
  }
};

// Gestionnaires pour passer les √©tapes
const handleSkipStep = async (ctx, step) => {
  try {
    console.log('üîÑ handleSkipStep appel√© avec step:', step);
    const userId = ctx.from.id;
    const userForm = userForms.get(userId);
    
    console.log('üë§ UserId:', userId);
    console.log('üìù UserForm exists:', !!userForm);
    
    if (!userForm) {
      console.log('‚ùå Pas de formulaire trouv√© pour userId:', userId);
      return await ctx.answerCbQuery('‚ùå Erreur de formulaire');
    }
    
    console.log('üìã Current step avant skip:', userForm.step);
    
    // Version simplifi√©e : juste passer √† l'√©tape suivante et utiliser les anciennes fonctions ask
    switch (step) {
      case 'telegram':
        userForm.step = 'telegram_channel';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip telegram ‚Üí telegram_channel');
        await askTelegramChannel(ctx);
        break;
      case 'telegram_channel':
        userForm.step = 'instagram';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip telegram_channel ‚Üí instagram');
        await askInstagram(ctx);
        break;
      case 'instagram':
        userForm.step = 'potato';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip instagram ‚Üí potato');
        await askPotato(ctx);
        break;
      case 'potato':
        userForm.step = 'snapchat';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip potato ‚Üí snapchat');
        await askSnapchat(ctx);
        break;
      case 'snapchat':
        userForm.step = 'whatsapp';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip snapchat ‚Üí whatsapp');
        await askWhatsApp(ctx);
        break;
      case 'whatsapp':
        userForm.step = 'signal';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip whatsapp ‚Üí signal');
        await askSignal(ctx);
        break;
      case 'signal':
        userForm.step = 'session';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip signal ‚Üí session');
        await askSession(ctx);
        break;
      case 'session':
        userForm.step = 'threema';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip session ‚Üí threema');
        await askThreema(ctx);
        break;
      case 'threema':
        userForm.step = 'country';
        userForms.set(userId, userForm);
        console.log('‚û°Ô∏è Skip threema ‚Üí country');
        await askCountry(ctx);
        break;
      default:
        console.log('‚ùå Step non reconnu:', step);
        throw new Error(`Step non support√©: ${step}`);
    }
    
    console.log('‚úÖ Skip step termin√© avec succ√®s');
    await ctx.answerCbQuery('√âtape pass√©e');
    
  } catch (error) {
    console.error('‚ùå ERREUR DANS handleSkipStep:');
    console.error('Step:', step);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    await ctx.answerCbQuery('‚ùå Erreur: ' + error.message).catch(e => console.error('Erreur answerCbQuery:', e));
  }
};

// Soumettre la demande
const submitApplication = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userForm = userForms.get(userId);
    
    if (!userForm) {
      return;
    }
    
    // Convertir les services au nouveau format (array)
    const servicesArray = [];
    if (userForm.data.services.delivery?.enabled) servicesArray.push('delivery');
    if (userForm.data.services.postal?.enabled) servicesArray.push('postal');
    if (userForm.data.services.meetup?.enabled) servicesArray.push('meetup');
    
    console.log('üìã SUBMIT DEBUG: Creating application with data:', {
      userId: userForm.data.userId,
      name: userForm.data.name,
      services: servicesArray,
      location: {
        country: userForm.data.country,
        city: userForm.data.country || 'Non sp√©cifi√©e'
      },
      contact: {
        telegram: userForm.data.telegram
      },
      hasPhoto: !!userForm.data.photo,
      photoFileId: userForm.data.photo ? userForm.data.photo.fileId : null
    });

    // Cr√©er la demande en base
    const application = new PlugApplication({
      userId: userForm.data.userId,
      username: userForm.data.username,
      firstName: userForm.data.firstName,
      lastName: userForm.data.lastName,
      name: userForm.data.name,
      description: userForm.data.name + ' - Inscription FindYourPlug', // Description par d√©faut
      location: {
        country: userForm.data.country,
        city: userForm.data.country || 'Non sp√©cifi√©e' // City par d√©faut
      },
      services: servicesArray, // Format array au lieu d'object
      contact: {
        telegram: userForm.data.telegram,
        instagram: userForm.data.instagram,
        potato: userForm.data.potato,
        snapchat: userForm.data.snapchat,
        whatsapp: userForm.data.whatsapp,
        signal: userForm.data.signal,
        session: userForm.data.session,
        threema: userForm.data.threema,
        other: ''
      },
      photo: userForm.data.photo ? userForm.data.photo.fileId : null, // Juste le fileId
      photoUrl: userForm.data.photo ? userForm.data.photo.fileId : null
    });
    
    console.log('üìã SUBMIT DEBUG: Attempting to save application...');
    
    // V√©rifications avant sauvegarde
    if (!userForm.data.telegram) {
      throw new Error('Telegram manquant - requis pour contact.telegram');
    }
    if (!userForm.data.name) {
      throw new Error('Nom du plug manquant - requis');
    }
    if (!userForm.data.country) {
      throw new Error('Pays manquant - requis');
    }
    
    console.log('‚úÖ SUBMIT DEBUG: Tous les champs requis sont pr√©sents');
    await application.save();
    console.log('‚úÖ SUBMIT DEBUG: Application saved successfully with ID:', application._id);
    
    // Envoyer notification √† l'admin (priv√©)
    const adminIds = [
      process.env.ADMIN_TELEGRAM_ID || '7670522278', // Admin principal
      // Ajoutez d'autres IDs ici si besoin :
      // '1234567890', // Autre admin
    ];
    
    try {
      // R√©cup√©rer l'instance du bot depuis le contexte global ou les param√®tres
      const bot = ctx.telegram ? { telegram: ctx.telegram } : global.bot;
      if (bot) {
        // Envoyer √† tous les admins en priv√©
        for (const adminId of adminIds) {
          await sendAdminNotification(bot, application, adminId);
        }
      }
    } catch (notificationError) {
      console.error('‚ö†Ô∏è Erreur notification admin:', notificationError.message);
      // Ne pas faire √©chouer la soumission pour une erreur de notification
    }
    
    // Nettoyer le formulaire
    userForms.delete(userId);
    lastBotMessages.delete(userId);
    
    const photoText = userForm.data.photo ? '‚úÖ Photo incluse' : '‚ö†Ô∏è Aucune photo';
    
    const message = `üõ†Ô∏è FORMULAIRE D'INSCRIPTION ‚Äì FindYourPlug\n\n` +
      `‚∏ª\n\n` +
      `üü© √âTAPE FINALE\n\n` +
      `üéâ Formulaire re√ßu !\n\n` +
      `üìå Pour valider ton inscription :\n\n` +
      `1Ô∏è‚É£ Poste le logo FindYourPlug sur un de tes r√©seaux renseign√©s avec le texte :\n` +
      `"Inscription en cours chez @FindYourPlug"\n` +
      `et identifie @findyourplug\n\n` +
      `2Ô∏è‚É£ Envoie une photo de ton stock avec\n` +
      `FindYourPlug et la date du jour √©crits sur papier\n` +
      `√† l'admin : @findyourplug_admin\n\n` +
      `‚è∞ Tu as 24h pour faire ces 2 √©tapes.\n\n` +
      `‚ÑπÔ∏è La pr√©-approbation peut prendre 24 √† 48h.\n` +
      `Tu seras notifi√© automatiquement de la d√©cision.`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô Retour au menu', 'back_main')]
    ]);
    
    // Utiliser editMessageText simple sans formatage pour √©viter les probl√®mes
    try {
      await ctx.editMessageText(message, {
        reply_markup: keyboard.reply_markup
        // Pas de parse_mode pour √©viter les erreurs de formatage
      });
    } catch (editError) {
      // Fallback: nouveau message si √©dition impossible
      await ctx.reply(message, {
        reply_markup: keyboard.reply_markup
        // Pas de parse_mode pour √©viter les erreurs de formatage
      });
    }
    
  } catch (error) {
    console.error('‚ùå SUBMIT ERROR: Detailed error in submitApplication:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    // Nettoyer le formulaire m√™me en cas d'erreur
    const userId = ctx.from.id;
    userForms.delete(userId);
    lastBotMessages.delete(userId);
    
    // Message d'erreur plus user-friendly
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô Retour au menu', 'back_main')]
    ]);
    
    try {
      await ctx.reply(
        '‚ùå **Erreur technique**\n\n' +
        'Une erreur s\'est produite lors de l\'envoi de ta demande.\n\n' +
        'üîÑ Tu peux r√©essayer dans quelques minutes.\n\n' +
        'üí° Si le probl√®me persiste, contacte le support.',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );
    } catch (replyError) {
      // Fallback ultime sans formatage
      await ctx.reply('‚ùå Erreur technique. R√©essaie plus tard.').catch(() => {});
    }
  }
};

// Annuler la demande
const handleCancelApplication = async (ctx) => {
  try {
      const userId = ctx.from.id;
  userForms.delete(userId);
  lastBotMessages.delete(userId);
  
  // R√©cup√©rer la langue actuelle pour les traductions
  const Config = require('../models/Config');
  const config = await Config.findById('main');
  const currentLang = config?.languages?.currentLanguage || 'fr';
  const customTranslations = config?.languages?.translations;
  
  const message = `${getTranslation('registration.cancelTitle', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.cancelMessage', currentLang, customTranslations)}\n\n` +
    `${getTranslation('registration.canRestart', currentLang, customTranslations)}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback(getTranslation('registration.backToMenu', currentLang, customTranslations), 'back_main')]
  ]);
  
  await safeEditMessage(ctx, message, {
    reply_markup: keyboard.reply_markup,
    parse_mode: 'Markdown'
  }, true); // Afficher avec l'image d'accueil
  
  await ctx.answerCbQuery(getTranslation('registration.cancelledShort', currentLang, customTranslations));
    
  } catch (error) {
    console.error('Erreur dans handleCancelApplication:', error);
    try {
      const Config = require('../models/Config');
      const config = await Config.findById('main');
      const currentLang = config?.languages?.currentLanguage || 'fr';
      const customTranslations = config?.languages?.translations;
      await ctx.answerCbQuery(getTranslation('registration.error.general', currentLang, customTranslations));
    } catch (langError) {
      await ctx.answerCbQuery('‚ùå Erreur');
    }
  }
};

// Fonction utilitaire pour formater les services
const getServicesText = (services) => {
  const servicesList = [];
  if (services.meetup.enabled) servicesList.push('üìç Meetup');
  if (services.delivery.enabled) servicesList.push('üöö Livraison');
  if (services.postal.enabled) servicesList.push('‚úàÔ∏è Envoi Postal');
  return servicesList.join(', ');
};

module.exports = {
  handleStartApplication,
  handleFormMessage,
  handleCountrySelection,
  handleServiceToggle,
  handleServicesDone,
  handlePhoto,
  handleSkipStep,
  handleCancelApplication,
  submitApplication,
  userForms,
  lastBotMessages
};