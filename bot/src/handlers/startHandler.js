const Config = require('../models/Config');
const Plug = require('../models/Plug');
const { createMainKeyboard, createVIPKeyboard } = require('../utils/keyboards');

const handleStart = async (ctx) => {
  try {
    console.log('üöÄ Commande /start re√ßue de:', ctx.from.id);
    
    // R√©cup√©rer la configuration avec fallback
    let config;
    try {
      config = await Config.findById('main');
      console.log('üìã Config trouv√©e:', !!config);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration config:', error);
    }
    
    if (!config) {
      console.log('‚ö†Ô∏è Pas de config, utilisation des valeurs par d√©faut');
      return ctx.reply('üåü Bienvenue sur notre bot !\n\nConfiguration en cours...');
    }

    // V√©rifications de s√©curit√©
    const welcomeText = config.welcome?.text || 'üåü Bienvenue sur notre bot !';
    const welcomeImage = config.welcome?.image || null;
    
    console.log('üìù Message d\'accueil pr√©par√©:', welcomeText.substring(0, 50) + '...');

    // Construire le message d'accueil (sans section VIP)
    let welcomeMessage = welcomeText;

    // Cr√©er le clavier principal
    const keyboard = createMainKeyboard(config);

    // Envoyer le message avec image si disponible
    if (welcomeImage) {
      try {
        console.log('üì∏ Envoi avec image:', welcomeImage);
        await ctx.replyWithPhoto(welcomeImage, {
          caption: welcomeMessage,
          reply_markup: keyboard.reply_markup,
          parse_mode: 'HTML'
        });
        console.log('‚úÖ Message avec image envoy√©');
      } catch (error) {
        console.error('‚ùå Erreur envoi photo:', error);
        // Fallback sans image
        console.log('üîÑ Fallback vers message texte');
        await ctx.reply(welcomeMessage, keyboard);
      }
    } else {
      console.log('üìù Envoi message texte simple');
      await ctx.reply(welcomeMessage, keyboard);
    }
    
    console.log('‚úÖ Commande /start termin√©e avec succ√®s');

  } catch (error) {
    console.error('Erreur dans handleStart:', error);
    await ctx.reply('‚ùå Une erreur est survenue, veuillez r√©essayer.');
  }
};

// Gestionnaire pour retour au menu principal
const handleBackMain = async (ctx) => {
  try {
    const config = await Config.findById('main');
    if (!config) {
      return ctx.answerCbQuery('‚ùå Configuration non trouv√©e');
    }

    // R√©cup√©rer les plugs VIP si activ√©s pour l'affichage
    let vipPlugs = [];
    if (config.vip.enabled) {
      vipPlugs = await Plug.find({ 
        isVip: true, 
        isActive: true 
      }).sort({ vipOrder: 1, createdAt: -1 }).limit(5);
    }

    // Construire le m√™me message d'accueil que dans handleStart
    let welcomeMessage = config.welcome.text;

    // Ajouter la section VIP si elle est en position 'top' et qu'il y a des plugs VIP
    if (config.vip.enabled && config.vip.position === 'top' && vipPlugs.length > 0) {
      welcomeMessage += `\n\n‚ú® ${config.vip.title} ‚ú®\n${config.vip.description}\n`;
      
      vipPlugs.forEach((plug, index) => {
        welcomeMessage += `\n‚≠ê ${plug.name}`;
        if (plug.description && plug.description.length < 50) {
          welcomeMessage += ` - ${plug.description}`;
        }
      });
      
      welcomeMessage += '\n';
    }
    
    const keyboard = createMainKeyboard(config);
    
    // Utiliser editMessageText pour une navigation fluide
    await ctx.editMessageText(welcomeMessage, {
      reply_markup: keyboard.reply_markup,
      parse_mode: 'HTML'
    });
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Erreur dans handleBackMain:', error);
    // Fallback : r√©pondre avec le message de d√©marrage
    await ctx.answerCbQuery('‚ùå Erreur lors du retour au menu');
  }
};

module.exports = {
  handleStart,
  handleBackMain
};