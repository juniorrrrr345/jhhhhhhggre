const Config = require('../models/Config');
const Plug = require('../models/Plug');
const User = require('../models/User');
const { createMainKeyboard, createVIPKeyboard, createPlugsFilterKeyboard } = require('../utils/keyboards');
const { sendMessageWithImage, editMessageWithImage } = require('../utils/messageHelper');
const { ensureConnection } = require('../utils/database');
const { handleReferral } = require('./referralHandler');
const { getTranslation } = require('../utils/translations');
const locationService = require('../services/locationService');

// Note: getFreshConfig sera pass√© comme param√®tre ou accessible globalement
let getFreshConfig = null;

// Fonction pour d√©finir la r√©f√©rence √† getFreshConfig
const setGetFreshConfig = (fn) => {
  getFreshConfig = fn;
};

const handleStart = async (ctx) => {
  try {
    console.log('üöÄ Commande /start re√ßue de:', ctx.from.id);
    
    // V√©rifier et s'assurer que MongoDB est connect√©
    await ensureConnection();

    // V√©rifier s'il y a un code de parrainage ou redirection directe
    const startPayload = ctx.message.text.split(' ')[1];
    if (startPayload) {
      // Format parrainage: ref_ID_BOUTIQUE_TIMESTAMP
      if (startPayload.startsWith('ref_')) {
        console.log('üîó Code de parrainage d√©tect√©:', startPayload);
        console.log('üë§ Utilisateur:', ctx.from.id, ctx.from.username || 'sans username');
        const referralHandled = await handleReferral(ctx, startPayload);
        console.log('üîÑ handleReferral returned:', referralHandled);
        if (referralHandled) {
          console.log('‚úÖ Parrainage trait√© avec succ√®s - STOP ici');
          return; // Le message de bienvenue personnalis√© a √©t√© envoy√©
        } else {
          console.log('‚ö†Ô∏è Parrainage pas trait√© - continue vers message accueil');
        }
      }
      // Format direct: plug_ID_BOUTIQUE ou ID_BOUTIQUE
      else if (startPayload.startsWith('plug_') || startPayload.match(/^[a-f\d]{24}$/)) {
        console.log('üéØ Redirection directe vers boutique d√©tect√©e:', startPayload);
        const plugId = startPayload.startsWith('plug_') ? startPayload.replace('plug_', '') : startPayload;
        
        try {
          const { handlePlugDetails } = require('./plugsHandler');
          await handlePlugDetails(ctx, plugId, 'direct_link');
          console.log('‚úÖ Redirection directe r√©ussie vers boutique:', plugId);
          return;
        } catch (directError) {
          console.error('‚ùå Erreur redirection directe:', directError);
          // Continuer vers le message d'accueil normal si √©chec
        }
      }
    }

    // Enregistrer ou mettre √† jour l'utilisateur avec g√©olocalisation
    const userId = ctx.from.id;
    const username = ctx.from.username || 'Utilisateur sans nom';
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';

    try {
      const user = await User.findOneAndUpdate(
        { telegramId: userId },
        {
          telegramId: userId,
          username: username,
          firstName: firstName,
          lastName: lastName,
          lastActivity: new Date(),
          isActive: true
        },
        { upsert: true, new: true }
      );
      
      console.log('‚úÖ Utilisateur enregistr√©/mis √† jour:', userId, username);
      
      // D√©tecter la g√©olocalisation en arri√®re-plan (non bloquant)
      locationService.detectAndSaveUserLocation(user).catch(error => {
        console.error('‚ö†Ô∏è Erreur g√©olocalisation non-critique:', error.message);
      });
      
    } catch (userError) {
      console.error('‚ùå Erreur lors de l\'enregistrement utilisateur:', userError);
      // Continuer m√™me si l'enregistrement utilisateur √©choue
    }

    // Obtenir la config
    const config = getFreshConfig ? await getFreshConfig() : await Config.findById('main');
    
    // NOUVEAU : Proposer directement les langues au /start
    await showLanguageSelection(ctx, config);
    
  } catch (error) {
    console.error('‚ùå Erreur dans handleStart:', error);
    await ctx.reply('‚ùå Erreur lors du chargement du menu').catch(() => {});
  }
};

// Nouvelle fonction pour afficher directement la s√©lection de langue
const showLanguageSelection = async (ctx, config) => {
  try {
    const { createLanguageKeyboard } = require('../utils/translations');
    
    // Message de bienvenue en multilingue
    const welcomeText = `üåç *Welcome! Bienvenue! Bienvenido! Benvenuto! Willkommen!*\n\n` +
                       `Please select your language / S√©lectionnez votre langue / Elige tu idioma / Seleziona la tua lingua / W√§hlen Sie Ihre Sprache:`;
    
    // Cr√©er le clavier de s√©lection de langue
    const languageKeyboard = createLanguageKeyboard('fr', null); // Pas de langue s√©lectionn√©e au d√©part
    
    // Envoyer avec l'image d'accueil
    try {
      if (ctx.callbackQuery) {
        await editMessageWithImage(ctx, welcomeText, languageKeyboard, config, { 
          parse_mode: 'Markdown' 
        });
      } else {
        await sendMessageWithImage(ctx, welcomeText, languageKeyboard, config, { 
          parse_mode: 'Markdown' 
        });
      }
    } catch (error) {
      console.error('‚ùå Erreur affichage s√©lection langue:', error);
      // Fallback sans image
      await ctx.reply(welcomeText, {
        reply_markup: languageKeyboard.reply_markup,
        parse_mode: 'Markdown'
      });
    }
    
    console.log('üåç S√©lection de langue affich√©e au /start');
  } catch (error) {
    console.error('‚ùå Erreur dans showLanguageSelection:', error);
    // Fallback vers l'ancien comportement
    const currentLang = config?.languages?.currentLanguage || 'fr';
    const customTranslations = config?.languages?.translations;
    
    // Utiliser le texte d'accueil personnalis√© du panel admin ou traduction par d√©faut
    const welcomeMessage = config?.welcome?.text || getTranslation('messages_welcome', currentLang, customTranslations);
    const keyboard = await createMainKeyboard(config);
    
    await sendMessageWithImage(ctx, welcomeMessage, keyboard, config, { 
      parse_mode: 'Markdown' 
    });
  }
};

// Gestionnaire pour retour au menu principal
const handleBackMain = async (ctx) => {
  try {
    console.log('üîô Retour au menu principal demand√©');
    
    // Confirmer imm√©diatement la callback pour √©viter le loading
    await ctx.answerCbQuery();
    
    // Toujours r√©cup√©rer la config fra√Æche
    const config = await Config.findById('main');
    if (!config) {
      console.log('‚ùå Configuration non trouv√©e');
      return;
    }

    console.log('üìã Configuration r√©cup√©r√©e pour le retour');

    // R√©cup√©rer la langue actuelle et les traductions
    const currentLang = config?.languages?.currentLanguage || 'fr';
    const customTranslations = config?.languages?.translations;
    
    console.log(`üåç Langue actuelle pour le retour: ${currentLang}`);

    // Utiliser le texte d'accueil personnalis√© du panel admin ou traduction par d√©faut
    const welcomeMessage = config?.welcome?.text || getTranslation('messages_welcome', currentLang, customTranslations);
    
    const keyboard = createMainKeyboard(config);
    
    console.log('üìù Message d\'accueil pr√©par√© pour le retour avec traduction');
    
    // Utiliser la fonction helper pour g√©rer l'image de fa√ßon coh√©rente
    await editMessageWithImage(ctx, welcomeMessage, keyboard, config, { parse_mode: 'Markdown' });
    
    console.log('‚úÖ Retour au menu principal termin√©');
  } catch (error) {
    console.error('‚ùå Erreur dans handleBackMain:', error);
    // Fallback : r√©pondre avec le message de d√©marrage
    try {
      await ctx.answerCbQuery('‚ùå Erreur lors du retour au menu').catch(() => {});
    } catch (cbError) {
      console.error('‚ùå Erreur lors de answerCbQuery:', cbError);
    }
  }
};

module.exports = {
  handleStart,
  handleBackMain,
  setGetFreshConfig
};