require('dotenv').config();
const mongoose = require('mongoose');
const Config = require('./src/models/Config');

async function fixInvalidUrls() {
  try {
    console.log('üîß Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connect√©');

    console.log('üìã R√©cup√©ration de la configuration...');
    const config = await Config.findById('main');
    
    if (!config) {
      console.log('‚ùå Configuration non trouv√©e');
      return;
    }

    let hasChanges = false;

    // V√©rifier et corriger les URLs des r√©seaux sociaux du message d'accueil
    if (config.welcome && config.welcome.socialMedia) {
      console.log('üîç V√©rification des URLs des r√©seaux sociaux...');
      
      for (let i = config.welcome.socialMedia.length - 1; i >= 0; i--) {
        const social = config.welcome.socialMedia[i];
        console.log(`V√©rification: ${social.emoji} ${social.name} -> ${social.url}`);
        
        // V√©rifier si c'est une adresse email (contient @ mais pas une URL valide)
        if (social.url && social.url.includes('@') && !social.url.startsWith('http')) {
          console.log(`üö´ URL invalide d√©tect√©e (adresse email): ${social.url}`);
          
          // Option 1: Supprimer ce r√©seau social car c'est une adresse email
          console.log(`‚ùå Suppression du r√©seau social "${social.name}" avec l'URL invalide`);
          config.welcome.socialMedia.splice(i, 1);
          hasChanges = true;
          
          // Option 2: Si c'est un support, on pourrait le convertir en URL mailto: (mais Telegram ne le supporte pas bien)
          // social.url = `mailto:${social.url}`;
        } else {
          // V√©rifier que l'URL est valide
          try {
            if (!social.url.startsWith('http://') && !social.url.startsWith('https://')) {
              social.url = 'https://' + social.url;
              hasChanges = true;
              console.log(`‚úÖ URL corrig√©e: ${social.url}`);
            }
            new URL(social.url);
            console.log(`‚úÖ URL valide: ${social.url}`);
          } catch (error) {
            console.log(`üö´ URL invalide supprim√©e: ${social.url}`);
            config.welcome.socialMedia.splice(i, 1);
            hasChanges = true;
          }
        }
      }
    }

    // V√©rifier les r√©seaux sociaux globaux
    if (config.socialMedia) {
      console.log('üîç V√©rification des r√©seaux sociaux globaux...');
      
      for (const [key, url] of Object.entries(config.socialMedia)) {
        if (url && typeof url === 'string') {
          console.log(`V√©rification ${key}: ${url}`);
          
          // V√©rifier si c'est une adresse email
          if (url.includes('@') && !url.startsWith('http')) {
            console.log(`üö´ URL globale invalide d√©tect√©e (adresse email): ${url}`);
            delete config.socialMedia[key];
            hasChanges = true;
          } else {
            // V√©rifier que l'URL est valide
            try {
              let correctedUrl = url;
              if (!url.startsWith('http://') && !url.startsWith('https://')) {
                correctedUrl = 'https://' + url;
              }
              new URL(correctedUrl);
              if (correctedUrl !== url) {
                config.socialMedia[key] = correctedUrl;
                hasChanges = true;
                console.log(`‚úÖ URL globale corrig√©e: ${correctedUrl}`);
              } else {
                console.log(`‚úÖ URL globale valide: ${url}`);
              }
            } catch (error) {
              console.log(`üö´ URL globale invalide supprim√©e: ${url}`);
              delete config.socialMedia[key];
              hasChanges = true;
            }
          }
        }
      }
    }

    if (hasChanges) {
      console.log('üíæ Sauvegarde des modifications...');
      await config.save();
      console.log('‚úÖ Configuration mise √† jour avec succ√®s');
      
      // Afficher la configuration finale
      console.log('\nüìã Configuration finale des r√©seaux sociaux d\'accueil:');
      if (config.welcome && config.welcome.socialMedia) {
        config.welcome.socialMedia.forEach((social, index) => {
          console.log(`${index + 1}. ${social.emoji} ${social.name}: ${social.url}`);
        });
      }
      
      console.log('\nüìã Configuration finale des r√©seaux sociaux globaux:');
      if (config.socialMedia) {
        for (const [key, url] of Object.entries(config.socialMedia)) {
          console.log(`${key}: ${url}`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è Aucune modification n√©cessaire');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

fixInvalidUrls();