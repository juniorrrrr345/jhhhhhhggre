const axios = require('axios');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);
const API_URL = process.env.API_URL || 'https://jhhhhhhggre.onrender.com';

async function restartBot() {
  console.log('üîÑ === RED√âMARRAGE DU BOT ===');
  console.log('‚è∞ Timestamp:', new Date().toISOString());
  console.log('=====================================\n');
  
  try {
    // 1. V√©rifier l'√©tat actuel
    console.log('1Ô∏è‚É£ V√©rification de l\'√©tat actuel...');
    try {
      const healthResponse = await axios.get(`${API_URL}/health`, { timeout: 5000 });
      console.log('‚úÖ Bot actuellement en ligne:', healthResponse.data.status);
    } catch (error) {
      console.log('‚ö†Ô∏è Bot actuellement hors ligne ou inaccessible');
    }
    
    // 2. Recharger la configuration
    console.log('\n2Ô∏è‚É£ Rechargement de la configuration...');
    try {
      const reloadResponse = await axios.post(`${API_URL}/api/bot/reload`, {}, {
        timeout: 10000,
        headers: {
          'Authorization': `Bearer ${process.env.ADMIN_PASSWORD || 'JuniorAdmon123'}`
        }
      });
      console.log('‚úÖ Configuration recharg√©e:', reloadResponse.data.message);
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de recharger la configuration:', error.message);
    }
    
    // 3. Test des commandes du bot
    console.log('\n3Ô∏è‚É£ Test des fonctionnalit√©s...');
    try {
      const diagnosticResponse = await axios.get(`${API_URL}/api/bot/diagnostic`, { timeout: 10000 });
      const diagnostic = diagnosticResponse.data;
      
      console.log(`ü§ñ Bot connect√©: ${diagnostic.bot.connected ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìä Base de donn√©es: ${diagnostic.database.status === 'connected' ? '‚úÖ' : '‚ùå'}`);
      console.log(`‚öôÔ∏è Configuration: ${diagnostic.database.configExists ? '‚úÖ' : '‚ùå'}`);
      
      if (diagnostic.bot.connected && diagnostic.database.status === 'connected' && diagnostic.database.configExists) {
        console.log('\nüéâ Bot op√©rationnel !');
        console.log(`üì± Nom du bot: ${diagnostic.bot.info.username}`);
        console.log(`üÜî ID du bot: ${diagnostic.bot.info.id}`);
        console.log(`‚è±Ô∏è Temps de fonctionnement: ${Math.round(diagnostic.environment.uptime)} secondes`);
      } else {
        console.log('\n‚ö†Ô∏è Probl√®mes d√©tect√©s dans le diagnostic');
      }
      
    } catch (error) {
      console.log('‚ùå Impossible d\'effectuer le diagnostic:', error.message);
    }
    
    console.log('\n=====================================');
    console.log('‚úÖ Processus de red√©marrage termin√©');
    console.log('üí° Le bot devrait maintenant r√©pondre aux commandes /start');
    console.log('=====================================');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du red√©marrage:', error.message);
    console.log('\nüí° Solutions possibles:');
    console.log('   1. V√©rifiez que le serveur Render est en ligne');
    console.log('   2. V√©rifiez les variables d\'environnement');
    console.log('   3. Contactez l\'administrateur syst√®me');
  }
}

// Instructions d'utilisation
function showUsage() {
  console.log('üîß === UTILISATION ===');
  console.log('node restart-bot.js          - Red√©marrer le bot');
  console.log('npm run restart              - Alias pour le red√©marrage');
  console.log('');
  console.log('Variables d\'environnement requises:');
  console.log('- API_URL: URL de l\'API du bot (d√©faut: https://jhhhhhhggre.onrender.com)');
  console.log('- ADMIN_PASSWORD: Mot de passe admin (d√©faut: JuniorAdmon123)');
}

// Executer le red√©marrage si appel√© directement
if (require.main === module) {
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showUsage();
  } else {
    restartBot().catch(console.error);
  }
}

module.exports = { restartBot };