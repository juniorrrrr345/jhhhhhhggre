const axios = require('axios');

const API_URL = process.env.API_URL || 'https://jhhhhhhggre.onrender.com';
const ADMIN_URL = process.env.ADMIN_URL || 'https://safeplugslink.vercel.app';

async function checkBotHealth() {
  try {
    console.log('üîç V√©rification de l\'√©tat du bot...');
    
    // Test de sant√© g√©n√©ral
    const healthResponse = await axios.get(`${API_URL}/health`, { timeout: 10000 });
    console.log('‚úÖ Bot API sant√©:', healthResponse.data.status);
    
    // Test de diagnostic d√©taill√©
    const diagnosticResponse = await axios.get(`${API_URL}/api/bot/diagnostic`, { timeout: 15000 });
    console.log('üìä Diagnostic bot:', JSON.stringify(diagnosticResponse.data, null, 2));
    
    // Test de configuration publique
    const configResponse = await axios.get(`${API_URL}/api/public/config`, { timeout: 10000 });
    console.log('‚öôÔ∏è Configuration publique disponible:', !!configResponse.data);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur v√©rification bot:', error.message);
    return false;
  }
}

async function checkAdminPanel() {
  try {
    console.log('üîç V√©rification du panel admin...');
    
    // Test de sant√© du panel admin
    const adminResponse = await axios.get(`${ADMIN_URL}/api/health`, { timeout: 10000 });
    console.log('‚úÖ Admin panel sant√©:', adminResponse.status === 200 ? 'OK' : 'KO');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur v√©rification admin panel:', error.message);
    return false;
  }
}

async function runDiagnostic() {
  console.log('ü©∫ === DIAGNOSTIC SYST√àME ===');
  console.log(`üåê API Bot: ${API_URL}`);
  console.log(`üîß Admin Panel: ${ADMIN_URL}`);
  console.log('‚è∞ Timestamp:', new Date().toISOString());
  console.log('=====================================\n');
  
  const botOk = await checkBotHealth();
  console.log('');
  const adminOk = await checkAdminPanel();
  
  console.log('\n=====================================');
  console.log('üìã R√âSUM√â:');
  console.log(`ü§ñ Bot: ${botOk ? '‚úÖ OK' : '‚ùå PROBL√àME'}`);
  console.log(`üîß Admin: ${adminOk ? '‚úÖ OK' : '‚ùå PROBL√àME'}`);
  
  if (botOk && adminOk) {
    console.log('üéâ Syst√®me op√©rationnel !');
  } else {
    console.log('‚ö†Ô∏è Des probl√®mes ont √©t√© d√©tect√©s.');
    
    if (!botOk) {
      console.log('üí° Solutions pour le bot:');
      console.log('   1. V√©rifiez que le serveur Render est d√©marr√©');
      console.log('   2. V√©rifiez la configuration MongoDB');
      console.log('   3. V√©rifiez le token Telegram');
    }
    
    if (!adminOk) {
      console.log('üí° Solutions pour l\'admin:');
      console.log('   1. V√©rifiez que Vercel est d√©ploy√©');
      console.log('   2. V√©rifiez la configuration du proxy');
    }
  }
  
  console.log('=====================================');
}

// Executer le diagnostic si appel√© directement
if (require.main === module) {
  runDiagnostic().catch(console.error);
}

module.exports = { runDiagnostic, checkBotHealth, checkAdminPanel };